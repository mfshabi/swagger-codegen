<?php
/**
 * PostRestream
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 5centscdn API
 *
 * This is a simple API
 *
 * OpenAPI spec version: 2.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.5
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PostRestream Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PostRestream implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PostRestream';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_method' => 'string',
'name' => 'string',
'restreamtype' => 'string',
'server' => '\Swagger\Client\Model\StreamsrestreamnewServer',
'url' => '\Swagger\Client\Model\StreamsrestreamnewUrl',
'audioonly' => 'string',
'domainlock' => '\Swagger\Client\Model\StreamstimeshiftnewDomainlock',
'geoblock' => '\Swagger\Client\Model\StreamsrestreamnewGeoblock',
'backup' => 'string',
'audiofix' => 'string',
'securetoken' => '\Swagger\Client\Model\StreamstimeshiftnewSecuretoken',
'record' => '\Swagger\Client\Model\StreamsrestreamnewRecord',
'eac' => '\Swagger\Client\Model\StreamsabrnewEac'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        '_method' => null,
'name' => null,
'restreamtype' => null,
'server' => null,
'url' => null,
'audioonly' => null,
'domainlock' => null,
'geoblock' => null,
'backup' => null,
'audiofix' => null,
'securetoken' => null,
'record' => null,
'eac' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_method' => '_METHOD',
'name' => 'name',
'restreamtype' => 'restreamtype',
'server' => 'server',
'url' => 'url',
'audioonly' => 'audioonly',
'domainlock' => 'domainlock',
'geoblock' => 'geoblock',
'backup' => 'backup',
'audiofix' => 'audiofix',
'securetoken' => 'securetoken',
'record' => 'record',
'eac' => 'eac'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_method' => 'setMethod',
'name' => 'setName',
'restreamtype' => 'setRestreamtype',
'server' => 'setServer',
'url' => 'setUrl',
'audioonly' => 'setAudioonly',
'domainlock' => 'setDomainlock',
'geoblock' => 'setGeoblock',
'backup' => 'setBackup',
'audiofix' => 'setAudiofix',
'securetoken' => 'setSecuretoken',
'record' => 'setRecord',
'eac' => 'setEac'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_method' => 'getMethod',
'name' => 'getName',
'restreamtype' => 'getRestreamtype',
'server' => 'getServer',
'url' => 'getUrl',
'audioonly' => 'getAudioonly',
'domainlock' => 'getDomainlock',
'geoblock' => 'getGeoblock',
'backup' => 'getBackup',
'audiofix' => 'getAudiofix',
'securetoken' => 'getSecuretoken',
'record' => 'getRecord',
'eac' => 'getEac'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_method'] = isset($data['_method']) ? $data['_method'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['restreamtype'] = isset($data['restreamtype']) ? $data['restreamtype'] : null;
        $this->container['server'] = isset($data['server']) ? $data['server'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['audioonly'] = isset($data['audioonly']) ? $data['audioonly'] : null;
        $this->container['domainlock'] = isset($data['domainlock']) ? $data['domainlock'] : null;
        $this->container['geoblock'] = isset($data['geoblock']) ? $data['geoblock'] : null;
        $this->container['backup'] = isset($data['backup']) ? $data['backup'] : null;
        $this->container['audiofix'] = isset($data['audiofix']) ? $data['audiofix'] : null;
        $this->container['securetoken'] = isset($data['securetoken']) ? $data['securetoken'] : null;
        $this->container['record'] = isset($data['record']) ? $data['record'] : null;
        $this->container['eac'] = isset($data['eac']) ? $data['eac'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['_method'] === null) {
            $invalidProperties[] = "'_method' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['restreamtype'] === null) {
            $invalidProperties[] = "'restreamtype' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _method
     *
     * @return string
     */
    public function getMethod()
    {
        return $this->container['_method'];
    }

    /**
     * Sets _method
     *
     * @param string $_method request method  PUT
     *
     * @return $this
     */
    public function setMethod($_method)
    {
        $this->container['_method'] = $_method;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Stream name.<br>Should be in the format part-1/part-2. Each part should have minimum 3 chars, separated by forward slash ‘/’, without any space
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets restreamtype
     *
     * @return string
     */
    public function getRestreamtype()
    {
        return $this->container['restreamtype'];
    }

    /**
     * Sets restreamtype
     *
     * @param string $restreamtype The values can be mediaserver or ffmpeg.<br> mediaserver: for restreaming via media server.<br> ffmpeg: for restreaming via ffmpeg server
     *
     * @return $this
     */
    public function setRestreamtype($restreamtype)
    {
        $this->container['restreamtype'] = $restreamtype;

        return $this;
    }

    /**
     * Gets server
     *
     * @return \Swagger\Client\Model\StreamsrestreamnewServer
     */
    public function getServer()
    {
        return $this->container['server'];
    }

    /**
     * Sets server
     *
     * @param \Swagger\Client\Model\StreamsrestreamnewServer $server server
     *
     * @return $this
     */
    public function setServer($server)
    {
        $this->container['server'] = $server;

        return $this;
    }

    /**
     * Gets url
     *
     * @return \Swagger\Client\Model\StreamsrestreamnewUrl
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param \Swagger\Client\Model\StreamsrestreamnewUrl $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets audioonly
     *
     * @return string
     */
    public function getAudioonly()
    {
        return $this->container['audioonly'];
    }

    /**
     * Sets audioonly
     *
     * @param string $audioonly Values can be Y or N<br>Set to Y if the HLS audio only stream should be added to the manifest file
     *
     * @return $this
     */
    public function setAudioonly($audioonly)
    {
        $this->container['audioonly'] = $audioonly;

        return $this;
    }

    /**
     * Gets domainlock
     *
     * @return \Swagger\Client\Model\StreamstimeshiftnewDomainlock
     */
    public function getDomainlock()
    {
        return $this->container['domainlock'];
    }

    /**
     * Sets domainlock
     *
     * @param \Swagger\Client\Model\StreamstimeshiftnewDomainlock $domainlock domainlock
     *
     * @return $this
     */
    public function setDomainlock($domainlock)
    {
        $this->container['domainlock'] = $domainlock;

        return $this;
    }

    /**
     * Gets geoblock
     *
     * @return \Swagger\Client\Model\StreamsrestreamnewGeoblock
     */
    public function getGeoblock()
    {
        return $this->container['geoblock'];
    }

    /**
     * Sets geoblock
     *
     * @param \Swagger\Client\Model\StreamsrestreamnewGeoblock $geoblock geoblock
     *
     * @return $this
     */
    public function setGeoblock($geoblock)
    {
        $this->container['geoblock'] = $geoblock;

        return $this;
    }

    /**
     * Gets backup
     *
     * @return string
     */
    public function getBackup()
    {
        return $this->container['backup'];
    }

    /**
     * Sets backup
     *
     * @param string $backup A link to backup video to roll when there is no publish
     *
     * @return $this
     */
    public function setBackup($backup)
    {
        $this->container['backup'] = $backup;

        return $this;
    }

    /**
     * Gets audiofix
     *
     * @return string
     */
    public function getAudiofix()
    {
        return $this->container['audiofix'];
    }

    /**
     * Sets audiofix
     *
     * @param string $audiofix Used to transcode the audio stream to aac using ffmpeg if required.<br> Available only when 'ffmpeg' restream type is chosen.
     *
     * @return $this
     */
    public function setAudiofix($audiofix)
    {
        $this->container['audiofix'] = $audiofix;

        return $this;
    }

    /**
     * Gets securetoken
     *
     * @return \Swagger\Client\Model\StreamstimeshiftnewSecuretoken
     */
    public function getSecuretoken()
    {
        return $this->container['securetoken'];
    }

    /**
     * Sets securetoken
     *
     * @param \Swagger\Client\Model\StreamstimeshiftnewSecuretoken $securetoken securetoken
     *
     * @return $this
     */
    public function setSecuretoken($securetoken)
    {
        $this->container['securetoken'] = $securetoken;

        return $this;
    }

    /**
     * Gets record
     *
     * @return \Swagger\Client\Model\StreamsrestreamnewRecord
     */
    public function getRecord()
    {
        return $this->container['record'];
    }

    /**
     * Sets record
     *
     * @param \Swagger\Client\Model\StreamsrestreamnewRecord $record record
     *
     * @return $this
     */
    public function setRecord($record)
    {
        $this->container['record'] = $record;

        return $this;
    }

    /**
     * Gets eac
     *
     * @return \Swagger\Client\Model\StreamsabrnewEac
     */
    public function getEac()
    {
        return $this->container['eac'];
    }

    /**
     * Sets eac
     *
     * @param \Swagger\Client\Model\StreamsabrnewEac $eac eac
     *
     * @return $this
     */
    public function setEac($eac)
    {
        $this->container['eac'] = $eac;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
