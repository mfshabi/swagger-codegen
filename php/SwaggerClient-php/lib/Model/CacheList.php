<?php
/**
 * CacheList
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 5centscdn API
 *
 * This is a simple API
 *
 * OpenAPI spec version: 2.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.5
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CacheList Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CacheList implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'cacheList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cache' => 'string',
'expiry' => 'string',
'querystring' => 'string',
'cachecontrol' => 'string',
'usestale' => 'string',
'revalidate' => 'string',
'cache_in_mins' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cache' => null,
'expiry' => null,
'querystring' => null,
'cachecontrol' => null,
'usestale' => null,
'revalidate' => null,
'cache_in_mins' => 'int32'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cache' => 'cache',
'expiry' => 'expiry',
'querystring' => 'querystring',
'cachecontrol' => 'cachecontrol',
'usestale' => 'usestale',
'revalidate' => 'revalidate',
'cache_in_mins' => 'cacheInMins'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cache' => 'setCache',
'expiry' => 'setExpiry',
'querystring' => 'setQuerystring',
'cachecontrol' => 'setCachecontrol',
'usestale' => 'setUsestale',
'revalidate' => 'setRevalidate',
'cache_in_mins' => 'setCacheInMins'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cache' => 'getCache',
'expiry' => 'getExpiry',
'querystring' => 'getQuerystring',
'cachecontrol' => 'getCachecontrol',
'usestale' => 'getUsestale',
'revalidate' => 'getRevalidate',
'cache_in_mins' => 'getCacheInMins'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cache'] = isset($data['cache']) ? $data['cache'] : null;
        $this->container['expiry'] = isset($data['expiry']) ? $data['expiry'] : null;
        $this->container['querystring'] = isset($data['querystring']) ? $data['querystring'] : null;
        $this->container['cachecontrol'] = isset($data['cachecontrol']) ? $data['cachecontrol'] : null;
        $this->container['usestale'] = isset($data['usestale']) ? $data['usestale'] : null;
        $this->container['revalidate'] = isset($data['revalidate']) ? $data['revalidate'] : null;
        $this->container['cache_in_mins'] = isset($data['cache_in_mins']) ? $data['cache_in_mins'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cache
     *
     * @return string
     */
    public function getCache()
    {
        return $this->container['cache'];
    }

    /**
     * Sets cache
     *
     * @param string $cache cache
     *
     * @return $this
     */
    public function setCache($cache)
    {
        $this->container['cache'] = $cache;

        return $this;
    }

    /**
     * Gets expiry
     *
     * @return string
     */
    public function getExpiry()
    {
        return $this->container['expiry'];
    }

    /**
     * Sets expiry
     *
     * @param string $expiry expiry
     *
     * @return $this
     */
    public function setExpiry($expiry)
    {
        $this->container['expiry'] = $expiry;

        return $this;
    }

    /**
     * Gets querystring
     *
     * @return string
     */
    public function getQuerystring()
    {
        return $this->container['querystring'];
    }

    /**
     * Sets querystring
     *
     * @param string $querystring querystring
     *
     * @return $this
     */
    public function setQuerystring($querystring)
    {
        $this->container['querystring'] = $querystring;

        return $this;
    }

    /**
     * Gets cachecontrol
     *
     * @return string
     */
    public function getCachecontrol()
    {
        return $this->container['cachecontrol'];
    }

    /**
     * Sets cachecontrol
     *
     * @param string $cachecontrol cachecontrol
     *
     * @return $this
     */
    public function setCachecontrol($cachecontrol)
    {
        $this->container['cachecontrol'] = $cachecontrol;

        return $this;
    }

    /**
     * Gets usestale
     *
     * @return string
     */
    public function getUsestale()
    {
        return $this->container['usestale'];
    }

    /**
     * Sets usestale
     *
     * @param string $usestale usestale
     *
     * @return $this
     */
    public function setUsestale($usestale)
    {
        $this->container['usestale'] = $usestale;

        return $this;
    }

    /**
     * Gets revalidate
     *
     * @return string
     */
    public function getRevalidate()
    {
        return $this->container['revalidate'];
    }

    /**
     * Sets revalidate
     *
     * @param string $revalidate revalidate
     *
     * @return $this
     */
    public function setRevalidate($revalidate)
    {
        $this->container['revalidate'] = $revalidate;

        return $this;
    }

    /**
     * Gets cache_in_mins
     *
     * @return int
     */
    public function getCacheInMins()
    {
        return $this->container['cache_in_mins'];
    }

    /**
     * Sets cache_in_mins
     *
     * @param int $cache_in_mins cache_in_mins
     *
     * @return $this
     */
    public function setCacheInMins($cache_in_mins)
    {
        $this->container['cache_in_mins'] = $cache_in_mins;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
