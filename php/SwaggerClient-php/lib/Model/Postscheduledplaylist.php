<?php
/**
 * Postscheduledplaylist
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 5centscdn API
 *
 * This is a simple API
 *
 * OpenAPI spec version: 2.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.5
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Postscheduledplaylist Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Postscheduledplaylist implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Postscheduledplaylist';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_method' => 'string',
'name' => 'string',
'parent' => 'string',
'audioonly' => 'string',
'preroll' => 'string',
'loop' => 'string',
'domainlock' => '\Swagger\Client\Model\StreamstimeshiftnewDomainlock',
'geoblock' => '\Swagger\Client\Model\StreamstimeshiftnewGeoblock',
'securetoken' => '\Swagger\Client\Model\StreamstimeshiftnewSecuretoken',
'rtmpauth' => '\Swagger\Client\Model\StreamsabrnewRtmpauth',
'eac' => '\Swagger\Client\Model\StreamsabrnewEac'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        '_method' => null,
'name' => null,
'parent' => null,
'audioonly' => null,
'preroll' => null,
'loop' => null,
'domainlock' => null,
'geoblock' => null,
'securetoken' => null,
'rtmpauth' => null,
'eac' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_method' => '_METHOD',
'name' => 'name',
'parent' => 'parent',
'audioonly' => 'audioonly',
'preroll' => 'preroll',
'loop' => 'loop',
'domainlock' => 'domainlock',
'geoblock' => 'geoblock',
'securetoken' => 'securetoken',
'rtmpauth' => 'rtmpauth',
'eac' => 'eac'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_method' => 'setMethod',
'name' => 'setName',
'parent' => 'setParent',
'audioonly' => 'setAudioonly',
'preroll' => 'setPreroll',
'loop' => 'setLoop',
'domainlock' => 'setDomainlock',
'geoblock' => 'setGeoblock',
'securetoken' => 'setSecuretoken',
'rtmpauth' => 'setRtmpauth',
'eac' => 'setEac'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_method' => 'getMethod',
'name' => 'getName',
'parent' => 'getParent',
'audioonly' => 'getAudioonly',
'preroll' => 'getPreroll',
'loop' => 'getLoop',
'domainlock' => 'getDomainlock',
'geoblock' => 'getGeoblock',
'securetoken' => 'getSecuretoken',
'rtmpauth' => 'getRtmpauth',
'eac' => 'getEac'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_method'] = isset($data['_method']) ? $data['_method'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['parent'] = isset($data['parent']) ? $data['parent'] : null;
        $this->container['audioonly'] = isset($data['audioonly']) ? $data['audioonly'] : null;
        $this->container['preroll'] = isset($data['preroll']) ? $data['preroll'] : null;
        $this->container['loop'] = isset($data['loop']) ? $data['loop'] : null;
        $this->container['domainlock'] = isset($data['domainlock']) ? $data['domainlock'] : null;
        $this->container['geoblock'] = isset($data['geoblock']) ? $data['geoblock'] : null;
        $this->container['securetoken'] = isset($data['securetoken']) ? $data['securetoken'] : null;
        $this->container['rtmpauth'] = isset($data['rtmpauth']) ? $data['rtmpauth'] : null;
        $this->container['eac'] = isset($data['eac']) ? $data['eac'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['_method'] === null) {
            $invalidProperties[] = "'_method' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['parent'] === null) {
            $invalidProperties[] = "'parent' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _method
     *
     * @return string
     */
    public function getMethod()
    {
        return $this->container['_method'];
    }

    /**
     * Sets _method
     *
     * @param string $_method To cast request method POST to PUT
     *
     * @return $this
     */
    public function setMethod($_method)
    {
        $this->container['_method'] = $_method;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Stream name should be in the format part-1/part-2. <br>Each part should have minimum 3 chars, separated by forward slash ‘/’, without any space.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets parent
     *
     * @return string
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param string $parent parent.codeshould be one of the parent code from the GET /streams/scheduledplaylist/parents call.
     *
     * @return $this
     */
    public function setParent($parent)
    {
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets audioonly
     *
     * @return string
     */
    public function getAudioonly()
    {
        return $this->container['audioonly'];
    }

    /**
     * Sets audioonly
     *
     * @param string $audioonly Values can be Y or N. <br>Set to Y if the HLS audio only stream should be added to the manifest file.<br>Set to Y if the HLS audio only stream should not be added
     *
     * @return $this
     */
    public function setAudioonly($audioonly)
    {
        $this->container['audioonly'] = $audioonly;

        return $this;
    }

    /**
     * Gets preroll
     *
     * @return string
     */
    public function getPreroll()
    {
        return $this->container['preroll'];
    }

    /**
     * Sets preroll
     *
     * @param string $preroll Values can br Y or N<br>Set to Y if publish should be enabled. <br> Set to Y if publish should be disabled.
     *
     * @return $this
     */
    public function setPreroll($preroll)
    {
        $this->container['preroll'] = $preroll;

        return $this;
    }

    /**
     * Gets loop
     *
     * @return string
     */
    public function getLoop()
    {
        return $this->container['loop'];
    }

    /**
     * Sets loop
     *
     * @param string $loop Values can be Y or N. <br>Set to Y for loop schedules
     *
     * @return $this
     */
    public function setLoop($loop)
    {
        $this->container['loop'] = $loop;

        return $this;
    }

    /**
     * Gets domainlock
     *
     * @return \Swagger\Client\Model\StreamstimeshiftnewDomainlock
     */
    public function getDomainlock()
    {
        return $this->container['domainlock'];
    }

    /**
     * Sets domainlock
     *
     * @param \Swagger\Client\Model\StreamstimeshiftnewDomainlock $domainlock domainlock
     *
     * @return $this
     */
    public function setDomainlock($domainlock)
    {
        $this->container['domainlock'] = $domainlock;

        return $this;
    }

    /**
     * Gets geoblock
     *
     * @return \Swagger\Client\Model\StreamstimeshiftnewGeoblock
     */
    public function getGeoblock()
    {
        return $this->container['geoblock'];
    }

    /**
     * Sets geoblock
     *
     * @param \Swagger\Client\Model\StreamstimeshiftnewGeoblock $geoblock geoblock
     *
     * @return $this
     */
    public function setGeoblock($geoblock)
    {
        $this->container['geoblock'] = $geoblock;

        return $this;
    }

    /**
     * Gets securetoken
     *
     * @return \Swagger\Client\Model\StreamstimeshiftnewSecuretoken
     */
    public function getSecuretoken()
    {
        return $this->container['securetoken'];
    }

    /**
     * Sets securetoken
     *
     * @param \Swagger\Client\Model\StreamstimeshiftnewSecuretoken $securetoken securetoken
     *
     * @return $this
     */
    public function setSecuretoken($securetoken)
    {
        $this->container['securetoken'] = $securetoken;

        return $this;
    }

    /**
     * Gets rtmpauth
     *
     * @return \Swagger\Client\Model\StreamsabrnewRtmpauth
     */
    public function getRtmpauth()
    {
        return $this->container['rtmpauth'];
    }

    /**
     * Sets rtmpauth
     *
     * @param \Swagger\Client\Model\StreamsabrnewRtmpauth $rtmpauth rtmpauth
     *
     * @return $this
     */
    public function setRtmpauth($rtmpauth)
    {
        $this->container['rtmpauth'] = $rtmpauth;

        return $this;
    }

    /**
     * Gets eac
     *
     * @return \Swagger\Client\Model\StreamsabrnewEac
     */
    public function getEac()
    {
        return $this->container['eac'];
    }

    /**
     * Sets eac
     *
     * @param \Swagger\Client\Model\StreamsabrnewEac $eac eac
     *
     * @return $this
     */
    public function setEac($eac)
    {
        $this->container['eac'] = $eac;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
