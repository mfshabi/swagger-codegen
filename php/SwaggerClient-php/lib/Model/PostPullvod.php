<?php
/**
 * PostPullvod
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 5centscdn API
 *
 * This is a simple API
 *
 * OpenAPI spec version: 2.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.5
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PostPullvod Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PostPullvod implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PostPullvod';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_method' => 'string',
'origin' => 'string',
'cnames' => 'string',
'cache_cache' => 'string',
'live' => 'string',
'edge' => '\Swagger\Client\Model\ZoneshttppushnewEdge',
'domainlock' => '\Swagger\Client\Model\ZoneshttppushnewDomainlock',
'securetoken' => '\Swagger\Client\Model\ZoneshttppullnewSecuretoken',
'ssl' => '\Swagger\Client\Model\ZoneshttppullnewSsl'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        '_method' => null,
'origin' => null,
'cnames' => null,
'cache_cache' => null,
'live' => null,
'edge' => null,
'domainlock' => null,
'securetoken' => null,
'ssl' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_method' => '_METHOD',
'origin' => 'origin',
'cnames' => 'cnames',
'cache_cache' => 'cache[cache]',
'live' => 'live',
'edge' => 'edge',
'domainlock' => 'domainlock',
'securetoken' => 'securetoken',
'ssl' => 'ssl'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_method' => 'setMethod',
'origin' => 'setOrigin',
'cnames' => 'setCnames',
'cache_cache' => 'setCacheCache',
'live' => 'setLive',
'edge' => 'setEdge',
'domainlock' => 'setDomainlock',
'securetoken' => 'setSecuretoken',
'ssl' => 'setSsl'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_method' => 'getMethod',
'origin' => 'getOrigin',
'cnames' => 'getCnames',
'cache_cache' => 'getCacheCache',
'live' => 'getLive',
'edge' => 'getEdge',
'domainlock' => 'getDomainlock',
'securetoken' => 'getSecuretoken',
'ssl' => 'getSsl'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_method'] = isset($data['_method']) ? $data['_method'] : null;
        $this->container['origin'] = isset($data['origin']) ? $data['origin'] : null;
        $this->container['cnames'] = isset($data['cnames']) ? $data['cnames'] : null;
        $this->container['cache_cache'] = isset($data['cache_cache']) ? $data['cache_cache'] : null;
        $this->container['live'] = isset($data['live']) ? $data['live'] : null;
        $this->container['edge'] = isset($data['edge']) ? $data['edge'] : null;
        $this->container['domainlock'] = isset($data['domainlock']) ? $data['domainlock'] : null;
        $this->container['securetoken'] = isset($data['securetoken']) ? $data['securetoken'] : null;
        $this->container['ssl'] = isset($data['ssl']) ? $data['ssl'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['_method'] === null) {
            $invalidProperties[] = "'_method' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _method
     *
     * @return string
     */
    public function getMethod()
    {
        return $this->container['_method'];
    }

    /**
     * Sets _method
     *
     * @param string $_method To cast request method POST to PUT
     *
     * @return $this
     */
    public function setMethod($_method)
    {
        $this->container['_method'] = $_method;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string $origin Your Origin Server Host Name
     *
     * @return $this
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets cnames
     *
     * @return string
     */
    public function getCnames()
    {
        return $this->container['cnames'];
    }

    /**
     * Sets cnames
     *
     * @param string $cnames Name that points to actual record. <br>Eg: docs.example.com
     *
     * @return $this
     */
    public function setCnames($cnames)
    {
        $this->container['cnames'] = $cnames;

        return $this;
    }

    /**
     * Gets cache_cache
     *
     * @return string
     */
    public function getCacheCache()
    {
        return $this->container['cache_cache'];
    }

    /**
     * Sets cache_cache
     *
     * @param string $cache_cache This will be the default cache name.The values can be 1d,7d,14d, 1M, 3M, 6M, or 1y
     *
     * @return $this
     */
    public function setCacheCache($cache_cache)
    {
        $this->container['cache_cache'] = $cache_cache;

        return $this;
    }

    /**
     * Gets live
     *
     * @return string
     */
    public function getLive()
    {
        return $this->container['live'];
    }

    /**
     * Sets live
     *
     * @param string $live Valyes can be Y or N<br> Set to Y to enable HLS live stream with origin.
     *
     * @return $this
     */
    public function setLive($live)
    {
        $this->container['live'] = $live;

        return $this;
    }

    /**
     * Gets edge
     *
     * @return \Swagger\Client\Model\ZoneshttppushnewEdge
     */
    public function getEdge()
    {
        return $this->container['edge'];
    }

    /**
     * Sets edge
     *
     * @param \Swagger\Client\Model\ZoneshttppushnewEdge $edge edge
     *
     * @return $this
     */
    public function setEdge($edge)
    {
        $this->container['edge'] = $edge;

        return $this;
    }

    /**
     * Gets domainlock
     *
     * @return \Swagger\Client\Model\ZoneshttppushnewDomainlock
     */
    public function getDomainlock()
    {
        return $this->container['domainlock'];
    }

    /**
     * Sets domainlock
     *
     * @param \Swagger\Client\Model\ZoneshttppushnewDomainlock $domainlock domainlock
     *
     * @return $this
     */
    public function setDomainlock($domainlock)
    {
        $this->container['domainlock'] = $domainlock;

        return $this;
    }

    /**
     * Gets securetoken
     *
     * @return \Swagger\Client\Model\ZoneshttppullnewSecuretoken
     */
    public function getSecuretoken()
    {
        return $this->container['securetoken'];
    }

    /**
     * Sets securetoken
     *
     * @param \Swagger\Client\Model\ZoneshttppullnewSecuretoken $securetoken securetoken
     *
     * @return $this
     */
    public function setSecuretoken($securetoken)
    {
        $this->container['securetoken'] = $securetoken;

        return $this;
    }

    /**
     * Gets ssl
     *
     * @return \Swagger\Client\Model\ZoneshttppullnewSsl
     */
    public function getSsl()
    {
        return $this->container['ssl'];
    }

    /**
     * Sets ssl
     *
     * @param \Swagger\Client\Model\ZoneshttppullnewSsl $ssl ssl
     *
     * @return $this
     */
    public function setSsl($ssl)
    {
        $this->container['ssl'] = $ssl;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
