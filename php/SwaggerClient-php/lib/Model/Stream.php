<?php
/**
 * Stream
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 5centscdn API
 *
 * This is a simple API
 *
 * OpenAPI spec version: 2.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.5
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Stream Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Stream implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Stream';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
'id' => 'int',
'serviceid' => 'int',
'name' => 'string',
'audioonly' => 'string',
'ssl' => 'string',
'parentid' => 'int',
'server' => 'string',
'backup' => 'string',
'deleted' => 'string',
'ssl_enabled' => 'string',
'playbackurls' => '\Swagger\Client\Model\StreamPlaybackurls',
'url_prefix_no_id' => 'string',
'domainlock' => '\Swagger\Client\Model\DomainlockList',
'geoblock' => '\Swagger\Client\Model\GeoblockList',
'securetoken' => '\Swagger\Client\Model\SecuretokenList',
'eac' => '\Swagger\Client\Model\EacList',
'rtmpauth' => '\Swagger\Client\Model\RtmpauthList',
'record' => 'string',
'preroll' => 'string',
'loop' => 'string',
'has_instant_schedule' => 'string',
'playlist_count' => 'int',
'playlists' => '\Swagger\Client\Model\PlayLists[]',
'do' => 'string',
'zone' => '\Swagger\Client\Model\ZoneList'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
'id' => 'int32',
'serviceid' => 'int32',
'name' => null,
'audioonly' => null,
'ssl' => null,
'parentid' => 'int32',
'server' => null,
'backup' => null,
'deleted' => null,
'ssl_enabled' => null,
'playbackurls' => null,
'url_prefix_no_id' => null,
'domainlock' => null,
'geoblock' => null,
'securetoken' => null,
'eac' => null,
'rtmpauth' => null,
'record' => null,
'preroll' => null,
'loop' => null,
'has_instant_schedule' => null,
'playlist_count' => 'int32',
'playlists' => null,
'do' => null,
'zone' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
'id' => 'id',
'serviceid' => 'serviceid',
'name' => 'name',
'audioonly' => 'audioonly',
'ssl' => 'ssl',
'parentid' => 'parentid',
'server' => 'server',
'backup' => 'backup',
'deleted' => 'deleted',
'ssl_enabled' => 'ssl_enabled',
'playbackurls' => 'playbackurls',
'url_prefix_no_id' => 'url_prefix_no_id',
'domainlock' => 'domainlock',
'geoblock' => 'geoblock',
'securetoken' => 'securetoken',
'eac' => 'eac',
'rtmpauth' => 'rtmpauth',
'record' => 'record',
'preroll' => 'preroll',
'loop' => 'loop',
'has_instant_schedule' => 'hasInstantSchedule',
'playlist_count' => 'playlistCount',
'playlists' => 'playlists',
'do' => 'do',
'zone' => 'zone'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
'id' => 'setId',
'serviceid' => 'setServiceid',
'name' => 'setName',
'audioonly' => 'setAudioonly',
'ssl' => 'setSsl',
'parentid' => 'setParentid',
'server' => 'setServer',
'backup' => 'setBackup',
'deleted' => 'setDeleted',
'ssl_enabled' => 'setSslEnabled',
'playbackurls' => 'setPlaybackurls',
'url_prefix_no_id' => 'setUrlPrefixNoId',
'domainlock' => 'setDomainlock',
'geoblock' => 'setGeoblock',
'securetoken' => 'setSecuretoken',
'eac' => 'setEac',
'rtmpauth' => 'setRtmpauth',
'record' => 'setRecord',
'preroll' => 'setPreroll',
'loop' => 'setLoop',
'has_instant_schedule' => 'setHasInstantSchedule',
'playlist_count' => 'setPlaylistCount',
'playlists' => 'setPlaylists',
'do' => 'setDo',
'zone' => 'setZone'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
'id' => 'getId',
'serviceid' => 'getServiceid',
'name' => 'getName',
'audioonly' => 'getAudioonly',
'ssl' => 'getSsl',
'parentid' => 'getParentid',
'server' => 'getServer',
'backup' => 'getBackup',
'deleted' => 'getDeleted',
'ssl_enabled' => 'getSslEnabled',
'playbackurls' => 'getPlaybackurls',
'url_prefix_no_id' => 'getUrlPrefixNoId',
'domainlock' => 'getDomainlock',
'geoblock' => 'getGeoblock',
'securetoken' => 'getSecuretoken',
'eac' => 'getEac',
'rtmpauth' => 'getRtmpauth',
'record' => 'getRecord',
'preroll' => 'getPreroll',
'loop' => 'getLoop',
'has_instant_schedule' => 'getHasInstantSchedule',
'playlist_count' => 'getPlaylistCount',
'playlists' => 'getPlaylists',
'do' => 'getDo',
'zone' => 'getZone'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['serviceid'] = isset($data['serviceid']) ? $data['serviceid'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['audioonly'] = isset($data['audioonly']) ? $data['audioonly'] : null;
        $this->container['ssl'] = isset($data['ssl']) ? $data['ssl'] : null;
        $this->container['parentid'] = isset($data['parentid']) ? $data['parentid'] : null;
        $this->container['server'] = isset($data['server']) ? $data['server'] : null;
        $this->container['backup'] = isset($data['backup']) ? $data['backup'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['ssl_enabled'] = isset($data['ssl_enabled']) ? $data['ssl_enabled'] : null;
        $this->container['playbackurls'] = isset($data['playbackurls']) ? $data['playbackurls'] : null;
        $this->container['url_prefix_no_id'] = isset($data['url_prefix_no_id']) ? $data['url_prefix_no_id'] : null;
        $this->container['domainlock'] = isset($data['domainlock']) ? $data['domainlock'] : null;
        $this->container['geoblock'] = isset($data['geoblock']) ? $data['geoblock'] : null;
        $this->container['securetoken'] = isset($data['securetoken']) ? $data['securetoken'] : null;
        $this->container['eac'] = isset($data['eac']) ? $data['eac'] : null;
        $this->container['rtmpauth'] = isset($data['rtmpauth']) ? $data['rtmpauth'] : null;
        $this->container['record'] = isset($data['record']) ? $data['record'] : null;
        $this->container['preroll'] = isset($data['preroll']) ? $data['preroll'] : null;
        $this->container['loop'] = isset($data['loop']) ? $data['loop'] : null;
        $this->container['has_instant_schedule'] = isset($data['has_instant_schedule']) ? $data['has_instant_schedule'] : null;
        $this->container['playlist_count'] = isset($data['playlist_count']) ? $data['playlist_count'] : null;
        $this->container['playlists'] = isset($data['playlists']) ? $data['playlists'] : null;
        $this->container['do'] = isset($data['do']) ? $data['do'] : null;
        $this->container['zone'] = isset($data['zone']) ? $data['zone'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets serviceid
     *
     * @return int
     */
    public function getServiceid()
    {
        return $this->container['serviceid'];
    }

    /**
     * Sets serviceid
     *
     * @param int $serviceid serviceid
     *
     * @return $this
     */
    public function setServiceid($serviceid)
    {
        $this->container['serviceid'] = $serviceid;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets audioonly
     *
     * @return string
     */
    public function getAudioonly()
    {
        return $this->container['audioonly'];
    }

    /**
     * Sets audioonly
     *
     * @param string $audioonly audioonly
     *
     * @return $this
     */
    public function setAudioonly($audioonly)
    {
        $this->container['audioonly'] = $audioonly;

        return $this;
    }

    /**
     * Gets ssl
     *
     * @return string
     */
    public function getSsl()
    {
        return $this->container['ssl'];
    }

    /**
     * Sets ssl
     *
     * @param string $ssl ssl
     *
     * @return $this
     */
    public function setSsl($ssl)
    {
        $this->container['ssl'] = $ssl;

        return $this;
    }

    /**
     * Gets parentid
     *
     * @return int
     */
    public function getParentid()
    {
        return $this->container['parentid'];
    }

    /**
     * Sets parentid
     *
     * @param int $parentid parentid
     *
     * @return $this
     */
    public function setParentid($parentid)
    {
        $this->container['parentid'] = $parentid;

        return $this;
    }

    /**
     * Gets server
     *
     * @return string
     */
    public function getServer()
    {
        return $this->container['server'];
    }

    /**
     * Sets server
     *
     * @param string $server server
     *
     * @return $this
     */
    public function setServer($server)
    {
        $this->container['server'] = $server;

        return $this;
    }

    /**
     * Gets backup
     *
     * @return string
     */
    public function getBackup()
    {
        return $this->container['backup'];
    }

    /**
     * Sets backup
     *
     * @param string $backup backup
     *
     * @return $this
     */
    public function setBackup($backup)
    {
        $this->container['backup'] = $backup;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return string
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param string $deleted deleted
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets ssl_enabled
     *
     * @return string
     */
    public function getSslEnabled()
    {
        return $this->container['ssl_enabled'];
    }

    /**
     * Sets ssl_enabled
     *
     * @param string $ssl_enabled ssl_enabled
     *
     * @return $this
     */
    public function setSslEnabled($ssl_enabled)
    {
        $this->container['ssl_enabled'] = $ssl_enabled;

        return $this;
    }

    /**
     * Gets playbackurls
     *
     * @return \Swagger\Client\Model\StreamPlaybackurls
     */
    public function getPlaybackurls()
    {
        return $this->container['playbackurls'];
    }

    /**
     * Sets playbackurls
     *
     * @param \Swagger\Client\Model\StreamPlaybackurls $playbackurls playbackurls
     *
     * @return $this
     */
    public function setPlaybackurls($playbackurls)
    {
        $this->container['playbackurls'] = $playbackurls;

        return $this;
    }

    /**
     * Gets url_prefix_no_id
     *
     * @return string
     */
    public function getUrlPrefixNoId()
    {
        return $this->container['url_prefix_no_id'];
    }

    /**
     * Sets url_prefix_no_id
     *
     * @param string $url_prefix_no_id url_prefix_no_id
     *
     * @return $this
     */
    public function setUrlPrefixNoId($url_prefix_no_id)
    {
        $this->container['url_prefix_no_id'] = $url_prefix_no_id;

        return $this;
    }

    /**
     * Gets domainlock
     *
     * @return \Swagger\Client\Model\DomainlockList
     */
    public function getDomainlock()
    {
        return $this->container['domainlock'];
    }

    /**
     * Sets domainlock
     *
     * @param \Swagger\Client\Model\DomainlockList $domainlock domainlock
     *
     * @return $this
     */
    public function setDomainlock($domainlock)
    {
        $this->container['domainlock'] = $domainlock;

        return $this;
    }

    /**
     * Gets geoblock
     *
     * @return \Swagger\Client\Model\GeoblockList
     */
    public function getGeoblock()
    {
        return $this->container['geoblock'];
    }

    /**
     * Sets geoblock
     *
     * @param \Swagger\Client\Model\GeoblockList $geoblock geoblock
     *
     * @return $this
     */
    public function setGeoblock($geoblock)
    {
        $this->container['geoblock'] = $geoblock;

        return $this;
    }

    /**
     * Gets securetoken
     *
     * @return \Swagger\Client\Model\SecuretokenList
     */
    public function getSecuretoken()
    {
        return $this->container['securetoken'];
    }

    /**
     * Sets securetoken
     *
     * @param \Swagger\Client\Model\SecuretokenList $securetoken securetoken
     *
     * @return $this
     */
    public function setSecuretoken($securetoken)
    {
        $this->container['securetoken'] = $securetoken;

        return $this;
    }

    /**
     * Gets eac
     *
     * @return \Swagger\Client\Model\EacList
     */
    public function getEac()
    {
        return $this->container['eac'];
    }

    /**
     * Sets eac
     *
     * @param \Swagger\Client\Model\EacList $eac eac
     *
     * @return $this
     */
    public function setEac($eac)
    {
        $this->container['eac'] = $eac;

        return $this;
    }

    /**
     * Gets rtmpauth
     *
     * @return \Swagger\Client\Model\RtmpauthList
     */
    public function getRtmpauth()
    {
        return $this->container['rtmpauth'];
    }

    /**
     * Sets rtmpauth
     *
     * @param \Swagger\Client\Model\RtmpauthList $rtmpauth rtmpauth
     *
     * @return $this
     */
    public function setRtmpauth($rtmpauth)
    {
        $this->container['rtmpauth'] = $rtmpauth;

        return $this;
    }

    /**
     * Gets record
     *
     * @return string
     */
    public function getRecord()
    {
        return $this->container['record'];
    }

    /**
     * Sets record
     *
     * @param string $record record
     *
     * @return $this
     */
    public function setRecord($record)
    {
        $this->container['record'] = $record;

        return $this;
    }

    /**
     * Gets preroll
     *
     * @return string
     */
    public function getPreroll()
    {
        return $this->container['preroll'];
    }

    /**
     * Sets preroll
     *
     * @param string $preroll preroll
     *
     * @return $this
     */
    public function setPreroll($preroll)
    {
        $this->container['preroll'] = $preroll;

        return $this;
    }

    /**
     * Gets loop
     *
     * @return string
     */
    public function getLoop()
    {
        return $this->container['loop'];
    }

    /**
     * Sets loop
     *
     * @param string $loop loop
     *
     * @return $this
     */
    public function setLoop($loop)
    {
        $this->container['loop'] = $loop;

        return $this;
    }

    /**
     * Gets has_instant_schedule
     *
     * @return string
     */
    public function getHasInstantSchedule()
    {
        return $this->container['has_instant_schedule'];
    }

    /**
     * Sets has_instant_schedule
     *
     * @param string $has_instant_schedule has_instant_schedule
     *
     * @return $this
     */
    public function setHasInstantSchedule($has_instant_schedule)
    {
        $this->container['has_instant_schedule'] = $has_instant_schedule;

        return $this;
    }

    /**
     * Gets playlist_count
     *
     * @return int
     */
    public function getPlaylistCount()
    {
        return $this->container['playlist_count'];
    }

    /**
     * Sets playlist_count
     *
     * @param int $playlist_count playlist_count
     *
     * @return $this
     */
    public function setPlaylistCount($playlist_count)
    {
        $this->container['playlist_count'] = $playlist_count;

        return $this;
    }

    /**
     * Gets playlists
     *
     * @return \Swagger\Client\Model\PlayLists[]
     */
    public function getPlaylists()
    {
        return $this->container['playlists'];
    }

    /**
     * Sets playlists
     *
     * @param \Swagger\Client\Model\PlayLists[] $playlists playlists
     *
     * @return $this
     */
    public function setPlaylists($playlists)
    {
        $this->container['playlists'] = $playlists;

        return $this;
    }

    /**
     * Gets do
     *
     * @return string
     */
    public function getDo()
    {
        return $this->container['do'];
    }

    /**
     * Sets do
     *
     * @param string $do do
     *
     * @return $this
     */
    public function setDo($do)
    {
        $this->container['do'] = $do;

        return $this;
    }

    /**
     * Gets zone
     *
     * @return \Swagger\Client\Model\ZoneList
     */
    public function getZone()
    {
        return $this->container['zone'];
    }

    /**
     * Sets zone
     *
     * @param \Swagger\Client\Model\ZoneList $zone zone
     *
     * @return $this
     */
    public function setZone($zone)
    {
        $this->container['zone'] = $zone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
