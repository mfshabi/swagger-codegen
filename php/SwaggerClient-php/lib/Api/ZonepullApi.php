<?php
/**
 * ZonepullApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 5centscdn API
 *
 * This is a simple API
 *
 * OpenAPI spec version: 2.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.5
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ZonepullApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ZonepullApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createZonePull
     *
     * Create Zone
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $_method _method (optional)
     * @param  string $origin origin (optional)
     * @param  string $cnames cnames (optional)
     * @param  string $cache_cache cache_cache (optional)
     * @param  string $cache_expiry cache_expiry (optional)
     * @param  string $live live (optional)
     * @param  \Swagger\Client\Model\ZoneshttppushnewEdge $edge edge (optional)
     * @param  \Swagger\Client\Model\ZoneshttppushnewDomainlock $domainlock domainlock (optional)
     * @param  \Swagger\Client\Model\ZoneshttppullnewSecuretoken $securetoken securetoken (optional)
     * @param  \Swagger\Client\Model\ZoneshttppullnewSsl $ssl ssl (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20041
     */
    public function createZonePull($x_api_key, $_method = null, $origin = null, $cnames = null, $cache_cache = null, $cache_expiry = null, $live = null, $edge = null, $domainlock = null, $securetoken = null, $ssl = null)
    {
        list($response) = $this->createZonePullWithHttpInfo($x_api_key, $_method, $origin, $cnames, $cache_cache, $cache_expiry, $live, $edge, $domainlock, $securetoken, $ssl);
        return $response;
    }

    /**
     * Operation createZonePullWithHttpInfo
     *
     * Create Zone
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $_method (optional)
     * @param  string $origin (optional)
     * @param  string $cnames (optional)
     * @param  string $cache_cache (optional)
     * @param  string $cache_expiry (optional)
     * @param  string $live (optional)
     * @param  \Swagger\Client\Model\ZoneshttppushnewEdge $edge (optional)
     * @param  \Swagger\Client\Model\ZoneshttppushnewDomainlock $domainlock (optional)
     * @param  \Swagger\Client\Model\ZoneshttppullnewSecuretoken $securetoken (optional)
     * @param  \Swagger\Client\Model\ZoneshttppullnewSsl $ssl (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20041, HTTP status code, HTTP response headers (array of strings)
     */
    public function createZonePullWithHttpInfo($x_api_key, $_method = null, $origin = null, $cnames = null, $cache_cache = null, $cache_expiry = null, $live = null, $edge = null, $domainlock = null, $securetoken = null, $ssl = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20041';
        $request = $this->createZonePullRequest($x_api_key, $_method, $origin, $cnames, $cache_cache, $cache_expiry, $live, $edge, $domainlock, $securetoken, $ssl);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20041',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createZonePullAsync
     *
     * Create Zone
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $_method (optional)
     * @param  string $origin (optional)
     * @param  string $cnames (optional)
     * @param  string $cache_cache (optional)
     * @param  string $cache_expiry (optional)
     * @param  string $live (optional)
     * @param  \Swagger\Client\Model\ZoneshttppushnewEdge $edge (optional)
     * @param  \Swagger\Client\Model\ZoneshttppushnewDomainlock $domainlock (optional)
     * @param  \Swagger\Client\Model\ZoneshttppullnewSecuretoken $securetoken (optional)
     * @param  \Swagger\Client\Model\ZoneshttppullnewSsl $ssl (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createZonePullAsync($x_api_key, $_method = null, $origin = null, $cnames = null, $cache_cache = null, $cache_expiry = null, $live = null, $edge = null, $domainlock = null, $securetoken = null, $ssl = null)
    {
        return $this->createZonePullAsyncWithHttpInfo($x_api_key, $_method, $origin, $cnames, $cache_cache, $cache_expiry, $live, $edge, $domainlock, $securetoken, $ssl)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createZonePullAsyncWithHttpInfo
     *
     * Create Zone
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $_method (optional)
     * @param  string $origin (optional)
     * @param  string $cnames (optional)
     * @param  string $cache_cache (optional)
     * @param  string $cache_expiry (optional)
     * @param  string $live (optional)
     * @param  \Swagger\Client\Model\ZoneshttppushnewEdge $edge (optional)
     * @param  \Swagger\Client\Model\ZoneshttppushnewDomainlock $domainlock (optional)
     * @param  \Swagger\Client\Model\ZoneshttppullnewSecuretoken $securetoken (optional)
     * @param  \Swagger\Client\Model\ZoneshttppullnewSsl $ssl (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createZonePullAsyncWithHttpInfo($x_api_key, $_method = null, $origin = null, $cnames = null, $cache_cache = null, $cache_expiry = null, $live = null, $edge = null, $domainlock = null, $securetoken = null, $ssl = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20041';
        $request = $this->createZonePullRequest($x_api_key, $_method, $origin, $cnames, $cache_cache, $cache_expiry, $live, $edge, $domainlock, $securetoken, $ssl);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createZonePull'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $_method (optional)
     * @param  string $origin (optional)
     * @param  string $cnames (optional)
     * @param  string $cache_cache (optional)
     * @param  string $cache_expiry (optional)
     * @param  string $live (optional)
     * @param  \Swagger\Client\Model\ZoneshttppushnewEdge $edge (optional)
     * @param  \Swagger\Client\Model\ZoneshttppushnewDomainlock $domainlock (optional)
     * @param  \Swagger\Client\Model\ZoneshttppullnewSecuretoken $securetoken (optional)
     * @param  \Swagger\Client\Model\ZoneshttppullnewSsl $ssl (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createZonePullRequest($x_api_key, $_method = null, $origin = null, $cnames = null, $cache_cache = null, $cache_expiry = null, $live = null, $edge = null, $domainlock = null, $securetoken = null, $ssl = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling createZonePull'
            );
        }

        $resourcePath = '/zones/http/pull/new';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }


        // form params
        if ($_method !== null) {
            $formParams['_METHOD'] = ObjectSerializer::toFormValue($_method);
        }
        // form params
        if ($origin !== null) {
            $formParams['origin'] = ObjectSerializer::toFormValue($origin);
        }
        // form params
        if ($cnames !== null) {
            $formParams['cnames'] = ObjectSerializer::toFormValue($cnames);
        }
        // form params
        if ($cache_cache !== null) {
            $formParams['cache[cache]'] = ObjectSerializer::toFormValue($cache_cache);
        }
        // form params
        if ($cache_expiry !== null) {
            $formParams['cache[expiry]'] = ObjectSerializer::toFormValue($cache_expiry);
        }
        // form params
        if ($live !== null) {
            $formParams['live'] = ObjectSerializer::toFormValue($live);
        }
        // form params
        if ($edge !== null) {
            $formParams['edge'] = ObjectSerializer::toFormValue($edge);
        }
        // form params
        if ($domainlock !== null) {
            $formParams['domainlock'] = ObjectSerializer::toFormValue($domainlock);
        }
        // form params
        if ($securetoken !== null) {
            $formParams['securetoken'] = ObjectSerializer::toFormValue($securetoken);
        }
        // form params
        if ($ssl !== null) {
            $formParams['ssl'] = ObjectSerializer::toFormValue($ssl);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getZonePull
     *
     * Zone
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20042
     */
    public function getZonePull($x_api_key, $zoneid)
    {
        list($response) = $this->getZonePullWithHttpInfo($x_api_key, $zoneid);
        return $response;
    }

    /**
     * Operation getZonePullWithHttpInfo
     *
     * Zone
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20042, HTTP status code, HTTP response headers (array of strings)
     */
    public function getZonePullWithHttpInfo($x_api_key, $zoneid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20042';
        $request = $this->getZonePullRequest($x_api_key, $zoneid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20042',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getZonePullAsync
     *
     * Zone
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getZonePullAsync($x_api_key, $zoneid)
    {
        return $this->getZonePullAsyncWithHttpInfo($x_api_key, $zoneid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getZonePullAsyncWithHttpInfo
     *
     * Zone
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getZonePullAsyncWithHttpInfo($x_api_key, $zoneid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20042';
        $request = $this->getZonePullRequest($x_api_key, $zoneid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getZonePull'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getZonePullRequest($x_api_key, $zoneid)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling getZonePull'
            );
        }
        // verify the required parameter 'zoneid' is set
        if ($zoneid === null || (is_array($zoneid) && count($zoneid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneid when calling getZonePull'
            );
        }

        $resourcePath = '/zones/http/pull/{zoneid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($zoneid !== null) {
            $resourcePath = str_replace(
                '{' . 'zoneid' . '}',
                ObjectSerializer::toPathValue($zoneid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restoreZonePull
     *
     * Restore
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2005
     */
    public function restoreZonePull($x_api_key, $zoneid)
    {
        list($response) = $this->restoreZonePullWithHttpInfo($x_api_key, $zoneid);
        return $response;
    }

    /**
     * Operation restoreZonePullWithHttpInfo
     *
     * Restore
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function restoreZonePullWithHttpInfo($x_api_key, $zoneid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->restoreZonePullRequest($x_api_key, $zoneid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2005',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restoreZonePullAsync
     *
     * Restore
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restoreZonePullAsync($x_api_key, $zoneid)
    {
        return $this->restoreZonePullAsyncWithHttpInfo($x_api_key, $zoneid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restoreZonePullAsyncWithHttpInfo
     *
     * Restore
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restoreZonePullAsyncWithHttpInfo($x_api_key, $zoneid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->restoreZonePullRequest($x_api_key, $zoneid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restoreZonePull'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restoreZonePullRequest($x_api_key, $zoneid)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling restoreZonePull'
            );
        }
        // verify the required parameter 'zoneid' is set
        if ($zoneid === null || (is_array($zoneid) && count($zoneid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneid when calling restoreZonePull'
            );
        }

        $resourcePath = '/zones/http/pull/{zoneid}/restore';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($zoneid !== null) {
            $resourcePath = str_replace(
                '{' . 'zoneid' . '}',
                ObjectSerializer::toPathValue($zoneid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCacheZonePull
     *
     * Update Cache
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $cache cache (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20044
     */
    public function updateCacheZonePull($x_api_key, $zoneid, $cache = null)
    {
        list($response) = $this->updateCacheZonePullWithHttpInfo($x_api_key, $zoneid, $cache);
        return $response;
    }

    /**
     * Operation updateCacheZonePullWithHttpInfo
     *
     * Update Cache
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $cache (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20044, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCacheZonePullWithHttpInfo($x_api_key, $zoneid, $cache = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20044';
        $request = $this->updateCacheZonePullRequest($x_api_key, $zoneid, $cache);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20044',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCacheZonePullAsync
     *
     * Update Cache
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $cache (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCacheZonePullAsync($x_api_key, $zoneid, $cache = null)
    {
        return $this->updateCacheZonePullAsyncWithHttpInfo($x_api_key, $zoneid, $cache)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCacheZonePullAsyncWithHttpInfo
     *
     * Update Cache
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $cache (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCacheZonePullAsyncWithHttpInfo($x_api_key, $zoneid, $cache = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20044';
        $request = $this->updateCacheZonePullRequest($x_api_key, $zoneid, $cache);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCacheZonePull'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $cache (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateCacheZonePullRequest($x_api_key, $zoneid, $cache = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updateCacheZonePull'
            );
        }
        // verify the required parameter 'zoneid' is set
        if ($zoneid === null || (is_array($zoneid) && count($zoneid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneid when calling updateCacheZonePull'
            );
        }

        $resourcePath = '/zones/http/pull/{zoneid}/cache';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($zoneid !== null) {
            $resourcePath = str_replace(
                '{' . 'zoneid' . '}',
                ObjectSerializer::toPathValue($zoneid),
                $resourcePath
            );
        }

        // form params
        if ($cache !== null) {
            $formParams['cache'] = ObjectSerializer::toFormValue($cache);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDomainLockZonePull
     *
     * Update Domain Lock
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $policy policy (optional)
     * @param  string $list list (optional)
     * @param  string $ips ips (optional)
     * @param  string $type type (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20044
     */
    public function updateDomainLockZonePull($x_api_key, $zoneid, $policy = null, $list = null, $ips = null, $type = null)
    {
        list($response) = $this->updateDomainLockZonePullWithHttpInfo($x_api_key, $zoneid, $policy, $list, $ips, $type);
        return $response;
    }

    /**
     * Operation updateDomainLockZonePullWithHttpInfo
     *
     * Update Domain Lock
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  string $ips (optional)
     * @param  string $type (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20044, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDomainLockZonePullWithHttpInfo($x_api_key, $zoneid, $policy = null, $list = null, $ips = null, $type = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20044';
        $request = $this->updateDomainLockZonePullRequest($x_api_key, $zoneid, $policy, $list, $ips, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20044',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDomainLockZonePullAsync
     *
     * Update Domain Lock
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  string $ips (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDomainLockZonePullAsync($x_api_key, $zoneid, $policy = null, $list = null, $ips = null, $type = null)
    {
        return $this->updateDomainLockZonePullAsyncWithHttpInfo($x_api_key, $zoneid, $policy, $list, $ips, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDomainLockZonePullAsyncWithHttpInfo
     *
     * Update Domain Lock
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  string $ips (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDomainLockZonePullAsyncWithHttpInfo($x_api_key, $zoneid, $policy = null, $list = null, $ips = null, $type = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20044';
        $request = $this->updateDomainLockZonePullRequest($x_api_key, $zoneid, $policy, $list, $ips, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDomainLockZonePull'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  string $ips (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateDomainLockZonePullRequest($x_api_key, $zoneid, $policy = null, $list = null, $ips = null, $type = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updateDomainLockZonePull'
            );
        }
        // verify the required parameter 'zoneid' is set
        if ($zoneid === null || (is_array($zoneid) && count($zoneid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneid when calling updateDomainLockZonePull'
            );
        }

        $resourcePath = '/zones/http/pull/{zoneid}/domainlock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($zoneid !== null) {
            $resourcePath = str_replace(
                '{' . 'zoneid' . '}',
                ObjectSerializer::toPathValue($zoneid),
                $resourcePath
            );
        }

        // form params
        if ($policy !== null) {
            $formParams['policy'] = ObjectSerializer::toFormValue($policy);
        }
        // form params
        if ($list !== null) {
            $formParams['list'] = ObjectSerializer::toFormValue($list);
        }
        // form params
        if ($ips !== null) {
            $formParams['ips'] = ObjectSerializer::toFormValue($ips);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEdgeSettingsZonePull
     *
     * Update Edge Settings
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $compression compression (optional)
     * @param  string $compressionlevel compressionlevel (optional)
     * @param  string $disposition disposition (optional)
     * @param  string $stripcookie stripcookie (optional)
     * @param  string $xff xff (optional)
     * @param  string $cors cors (optional)
     * @param  string $webp webp (optional)
     * @param  string $pseudostreaming pseudostreaming (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20044
     */
    public function updateEdgeSettingsZonePull($x_api_key, $zoneid, $compression = null, $compressionlevel = null, $disposition = null, $stripcookie = null, $xff = null, $cors = null, $webp = null, $pseudostreaming = null)
    {
        list($response) = $this->updateEdgeSettingsZonePullWithHttpInfo($x_api_key, $zoneid, $compression, $compressionlevel, $disposition, $stripcookie, $xff, $cors, $webp, $pseudostreaming);
        return $response;
    }

    /**
     * Operation updateEdgeSettingsZonePullWithHttpInfo
     *
     * Update Edge Settings
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $compression (optional)
     * @param  string $compressionlevel (optional)
     * @param  string $disposition (optional)
     * @param  string $stripcookie (optional)
     * @param  string $xff (optional)
     * @param  string $cors (optional)
     * @param  string $webp (optional)
     * @param  string $pseudostreaming (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20044, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEdgeSettingsZonePullWithHttpInfo($x_api_key, $zoneid, $compression = null, $compressionlevel = null, $disposition = null, $stripcookie = null, $xff = null, $cors = null, $webp = null, $pseudostreaming = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20044';
        $request = $this->updateEdgeSettingsZonePullRequest($x_api_key, $zoneid, $compression, $compressionlevel, $disposition, $stripcookie, $xff, $cors, $webp, $pseudostreaming);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20044',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEdgeSettingsZonePullAsync
     *
     * Update Edge Settings
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $compression (optional)
     * @param  string $compressionlevel (optional)
     * @param  string $disposition (optional)
     * @param  string $stripcookie (optional)
     * @param  string $xff (optional)
     * @param  string $cors (optional)
     * @param  string $webp (optional)
     * @param  string $pseudostreaming (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEdgeSettingsZonePullAsync($x_api_key, $zoneid, $compression = null, $compressionlevel = null, $disposition = null, $stripcookie = null, $xff = null, $cors = null, $webp = null, $pseudostreaming = null)
    {
        return $this->updateEdgeSettingsZonePullAsyncWithHttpInfo($x_api_key, $zoneid, $compression, $compressionlevel, $disposition, $stripcookie, $xff, $cors, $webp, $pseudostreaming)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEdgeSettingsZonePullAsyncWithHttpInfo
     *
     * Update Edge Settings
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $compression (optional)
     * @param  string $compressionlevel (optional)
     * @param  string $disposition (optional)
     * @param  string $stripcookie (optional)
     * @param  string $xff (optional)
     * @param  string $cors (optional)
     * @param  string $webp (optional)
     * @param  string $pseudostreaming (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEdgeSettingsZonePullAsyncWithHttpInfo($x_api_key, $zoneid, $compression = null, $compressionlevel = null, $disposition = null, $stripcookie = null, $xff = null, $cors = null, $webp = null, $pseudostreaming = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20044';
        $request = $this->updateEdgeSettingsZonePullRequest($x_api_key, $zoneid, $compression, $compressionlevel, $disposition, $stripcookie, $xff, $cors, $webp, $pseudostreaming);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEdgeSettingsZonePull'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $compression (optional)
     * @param  string $compressionlevel (optional)
     * @param  string $disposition (optional)
     * @param  string $stripcookie (optional)
     * @param  string $xff (optional)
     * @param  string $cors (optional)
     * @param  string $webp (optional)
     * @param  string $pseudostreaming (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateEdgeSettingsZonePullRequest($x_api_key, $zoneid, $compression = null, $compressionlevel = null, $disposition = null, $stripcookie = null, $xff = null, $cors = null, $webp = null, $pseudostreaming = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updateEdgeSettingsZonePull'
            );
        }
        // verify the required parameter 'zoneid' is set
        if ($zoneid === null || (is_array($zoneid) && count($zoneid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneid when calling updateEdgeSettingsZonePull'
            );
        }

        $resourcePath = '/zones/http/pull/{zoneid}/edge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($zoneid !== null) {
            $resourcePath = str_replace(
                '{' . 'zoneid' . '}',
                ObjectSerializer::toPathValue($zoneid),
                $resourcePath
            );
        }

        // form params
        if ($compression !== null) {
            $formParams['compression'] = ObjectSerializer::toFormValue($compression);
        }
        // form params
        if ($compressionlevel !== null) {
            $formParams['compressionlevel'] = ObjectSerializer::toFormValue($compressionlevel);
        }
        // form params
        if ($disposition !== null) {
            $formParams['disposition'] = ObjectSerializer::toFormValue($disposition);
        }
        // form params
        if ($stripcookie !== null) {
            $formParams['stripcookie'] = ObjectSerializer::toFormValue($stripcookie);
        }
        // form params
        if ($xff !== null) {
            $formParams['xff'] = ObjectSerializer::toFormValue($xff);
        }
        // form params
        if ($cors !== null) {
            $formParams['cors'] = ObjectSerializer::toFormValue($cors);
        }
        // form params
        if ($webp !== null) {
            $formParams['webp'] = ObjectSerializer::toFormValue($webp);
        }
        // form params
        if ($pseudostreaming !== null) {
            $formParams['pseudostreaming'] = ObjectSerializer::toFormValue($pseudostreaming);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSecureTokenZonePull
     *
     * Update Secure Token
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $policy policy (optional)
     * @param  string $list list (optional)
     * @param  int $timeout timeout (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20044
     */
    public function updateSecureTokenZonePull($x_api_key, $zoneid, $policy = null, $list = null, $timeout = null)
    {
        list($response) = $this->updateSecureTokenZonePullWithHttpInfo($x_api_key, $zoneid, $policy, $list, $timeout);
        return $response;
    }

    /**
     * Operation updateSecureTokenZonePullWithHttpInfo
     *
     * Update Secure Token
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  int $timeout (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20044, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSecureTokenZonePullWithHttpInfo($x_api_key, $zoneid, $policy = null, $list = null, $timeout = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20044';
        $request = $this->updateSecureTokenZonePullRequest($x_api_key, $zoneid, $policy, $list, $timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20044',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSecureTokenZonePullAsync
     *
     * Update Secure Token
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  int $timeout (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSecureTokenZonePullAsync($x_api_key, $zoneid, $policy = null, $list = null, $timeout = null)
    {
        return $this->updateSecureTokenZonePullAsyncWithHttpInfo($x_api_key, $zoneid, $policy, $list, $timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSecureTokenZonePullAsyncWithHttpInfo
     *
     * Update Secure Token
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  int $timeout (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSecureTokenZonePullAsyncWithHttpInfo($x_api_key, $zoneid, $policy = null, $list = null, $timeout = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20044';
        $request = $this->updateSecureTokenZonePullRequest($x_api_key, $zoneid, $policy, $list, $timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSecureTokenZonePull'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  int $timeout (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSecureTokenZonePullRequest($x_api_key, $zoneid, $policy = null, $list = null, $timeout = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updateSecureTokenZonePull'
            );
        }
        // verify the required parameter 'zoneid' is set
        if ($zoneid === null || (is_array($zoneid) && count($zoneid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneid when calling updateSecureTokenZonePull'
            );
        }

        $resourcePath = '/zones/http/pull/{zoneid}/securetoken';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($zoneid !== null) {
            $resourcePath = str_replace(
                '{' . 'zoneid' . '}',
                ObjectSerializer::toPathValue($zoneid),
                $resourcePath
            );
        }

        // form params
        if ($policy !== null) {
            $formParams['policy'] = ObjectSerializer::toFormValue($policy);
        }
        // form params
        if ($list !== null) {
            $formParams['list'] = ObjectSerializer::toFormValue($list);
        }
        // form params
        if ($timeout !== null) {
            $formParams['timeout'] = ObjectSerializer::toFormValue($timeout);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSslZonePull
     *
     * Update SSL
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $http2 http2 (optional)
     * @param  string $mode mode (optional)
     * @param  int $certid certid (optional)
     * @param  string $name name (optional)
     * @param  string $crt crt (optional)
     * @param  string $key key (optional)
     * @param  string $cabundle cabundle (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20043
     */
    public function updateSslZonePull($x_api_key, $zoneid, $http2 = null, $mode = null, $certid = null, $name = null, $crt = null, $key = null, $cabundle = null)
    {
        list($response) = $this->updateSslZonePullWithHttpInfo($x_api_key, $zoneid, $http2, $mode, $certid, $name, $crt, $key, $cabundle);
        return $response;
    }

    /**
     * Operation updateSslZonePullWithHttpInfo
     *
     * Update SSL
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $http2 (optional)
     * @param  string $mode (optional)
     * @param  int $certid (optional)
     * @param  string $name (optional)
     * @param  string $crt (optional)
     * @param  string $key (optional)
     * @param  string $cabundle (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20043, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSslZonePullWithHttpInfo($x_api_key, $zoneid, $http2 = null, $mode = null, $certid = null, $name = null, $crt = null, $key = null, $cabundle = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20043';
        $request = $this->updateSslZonePullRequest($x_api_key, $zoneid, $http2, $mode, $certid, $name, $crt, $key, $cabundle);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20043',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSslZonePullAsync
     *
     * Update SSL
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $http2 (optional)
     * @param  string $mode (optional)
     * @param  int $certid (optional)
     * @param  string $name (optional)
     * @param  string $crt (optional)
     * @param  string $key (optional)
     * @param  string $cabundle (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSslZonePullAsync($x_api_key, $zoneid, $http2 = null, $mode = null, $certid = null, $name = null, $crt = null, $key = null, $cabundle = null)
    {
        return $this->updateSslZonePullAsyncWithHttpInfo($x_api_key, $zoneid, $http2, $mode, $certid, $name, $crt, $key, $cabundle)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSslZonePullAsyncWithHttpInfo
     *
     * Update SSL
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $http2 (optional)
     * @param  string $mode (optional)
     * @param  int $certid (optional)
     * @param  string $name (optional)
     * @param  string $crt (optional)
     * @param  string $key (optional)
     * @param  string $cabundle (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSslZonePullAsyncWithHttpInfo($x_api_key, $zoneid, $http2 = null, $mode = null, $certid = null, $name = null, $crt = null, $key = null, $cabundle = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20043';
        $request = $this->updateSslZonePullRequest($x_api_key, $zoneid, $http2, $mode, $certid, $name, $crt, $key, $cabundle);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSslZonePull'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $http2 (optional)
     * @param  string $mode (optional)
     * @param  int $certid (optional)
     * @param  string $name (optional)
     * @param  string $crt (optional)
     * @param  string $key (optional)
     * @param  string $cabundle (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSslZonePullRequest($x_api_key, $zoneid, $http2 = null, $mode = null, $certid = null, $name = null, $crt = null, $key = null, $cabundle = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updateSslZonePull'
            );
        }
        // verify the required parameter 'zoneid' is set
        if ($zoneid === null || (is_array($zoneid) && count($zoneid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneid when calling updateSslZonePull'
            );
        }

        $resourcePath = '/zones/http/pull/{zoneid}/ssl';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($zoneid !== null) {
            $resourcePath = str_replace(
                '{' . 'zoneid' . '}',
                ObjectSerializer::toPathValue($zoneid),
                $resourcePath
            );
        }

        // form params
        if ($http2 !== null) {
            $formParams['http2'] = ObjectSerializer::toFormValue($http2);
        }
        // form params
        if ($mode !== null) {
            $formParams['mode'] = ObjectSerializer::toFormValue($mode);
        }
        // form params
        if ($certid !== null) {
            $formParams['certid'] = ObjectSerializer::toFormValue($certid);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($crt !== null) {
            $formParams['crt'] = ObjectSerializer::toFormValue($crt);
        }
        // form params
        if ($key !== null) {
            $formParams['key'] = ObjectSerializer::toFormValue($key);
        }
        // form params
        if ($cabundle !== null) {
            $formParams['cabundle'] = ObjectSerializer::toFormValue($cabundle);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateZonePull
     *
     * Update Info
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $cnames cnames (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20043
     */
    public function updateZonePull($x_api_key, $zoneid, $cnames = null)
    {
        list($response) = $this->updateZonePullWithHttpInfo($x_api_key, $zoneid, $cnames);
        return $response;
    }

    /**
     * Operation updateZonePullWithHttpInfo
     *
     * Update Info
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $cnames (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20043, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateZonePullWithHttpInfo($x_api_key, $zoneid, $cnames = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20043';
        $request = $this->updateZonePullRequest($x_api_key, $zoneid, $cnames);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20043',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateZonePullAsync
     *
     * Update Info
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $cnames (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateZonePullAsync($x_api_key, $zoneid, $cnames = null)
    {
        return $this->updateZonePullAsyncWithHttpInfo($x_api_key, $zoneid, $cnames)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateZonePullAsyncWithHttpInfo
     *
     * Update Info
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $cnames (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateZonePullAsyncWithHttpInfo($x_api_key, $zoneid, $cnames = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20043';
        $request = $this->updateZonePullRequest($x_api_key, $zoneid, $cnames);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateZonePull'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $cnames (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateZonePullRequest($x_api_key, $zoneid, $cnames = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updateZonePull'
            );
        }
        // verify the required parameter 'zoneid' is set
        if ($zoneid === null || (is_array($zoneid) && count($zoneid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneid when calling updateZonePull'
            );
        }

        $resourcePath = '/zones/http/pull/{zoneid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($zoneid !== null) {
            $resourcePath = str_replace(
                '{' . 'zoneid' . '}',
                ObjectSerializer::toPathValue($zoneid),
                $resourcePath
            );
        }

        // form params
        if ($cnames !== null) {
            $formParams['cnames'] = ObjectSerializer::toFormValue($cnames);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation zoneCachePurgeZonePull
     *
     * Purge
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $_method _method (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2005
     */
    public function zoneCachePurgeZonePull($x_api_key, $zoneid, $_method = null)
    {
        list($response) = $this->zoneCachePurgeZonePullWithHttpInfo($x_api_key, $zoneid, $_method);
        return $response;
    }

    /**
     * Operation zoneCachePurgeZonePullWithHttpInfo
     *
     * Purge
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $_method (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function zoneCachePurgeZonePullWithHttpInfo($x_api_key, $zoneid, $_method = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->zoneCachePurgeZonePullRequest($x_api_key, $zoneid, $_method);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2005',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zoneCachePurgeZonePullAsync
     *
     * Purge
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $_method (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function zoneCachePurgeZonePullAsync($x_api_key, $zoneid, $_method = null)
    {
        return $this->zoneCachePurgeZonePullAsyncWithHttpInfo($x_api_key, $zoneid, $_method)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zoneCachePurgeZonePullAsyncWithHttpInfo
     *
     * Purge
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $_method (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function zoneCachePurgeZonePullAsyncWithHttpInfo($x_api_key, $zoneid, $_method = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->zoneCachePurgeZonePullRequest($x_api_key, $zoneid, $_method);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'zoneCachePurgeZonePull'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $_method (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function zoneCachePurgeZonePullRequest($x_api_key, $zoneid, $_method = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling zoneCachePurgeZonePull'
            );
        }
        // verify the required parameter 'zoneid' is set
        if ($zoneid === null || (is_array($zoneid) && count($zoneid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneid when calling zoneCachePurgeZonePull'
            );
        }

        $resourcePath = '/zones/http/pull/{zoneid}/purge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($zoneid !== null) {
            $resourcePath = str_replace(
                '{' . 'zoneid' . '}',
                ObjectSerializer::toPathValue($zoneid),
                $resourcePath
            );
        }

        // form params
        if ($_method !== null) {
            $formParams['_METHOD'] = ObjectSerializer::toFormValue($_method);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation zonePullList
     *
     * Zone
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20040
     */
    public function zonePullList($x_api_key)
    {
        list($response) = $this->zonePullListWithHttpInfo($x_api_key);
        return $response;
    }

    /**
     * Operation zonePullListWithHttpInfo
     *
     * Zone
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20040, HTTP status code, HTTP response headers (array of strings)
     */
    public function zonePullListWithHttpInfo($x_api_key)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20040';
        $request = $this->zonePullListRequest($x_api_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20040',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zonePullListAsync
     *
     * Zone
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function zonePullListAsync($x_api_key)
    {
        return $this->zonePullListAsyncWithHttpInfo($x_api_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zonePullListAsyncWithHttpInfo
     *
     * Zone
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function zonePullListAsyncWithHttpInfo($x_api_key)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20040';
        $request = $this->zonePullListRequest($x_api_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'zonePullList'
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function zonePullListRequest($x_api_key)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling zonePullList'
            );
        }

        $resourcePath = '/zones/http/pull';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
