<?php
/**
 * ZonevodpullApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 5centscdn API
 *
 * This is a simple API
 *
 * OpenAPI spec version: 2.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.5
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ZonevodpullApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ZonevodpullApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createzonevodpullPush
     *
     * Create Zone
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $_method _method (optional)
     * @param  string $origin origin (optional)
     * @param  string $cnames cnames (optional)
     * @param  string $cache_cache cache_cache (optional)
     * @param  string $live live (optional)
     * @param  \Swagger\Client\Model\ZoneshttppushnewEdge $edge edge (optional)
     * @param  \Swagger\Client\Model\ZoneshttppushnewDomainlock $domainlock domainlock (optional)
     * @param  \Swagger\Client\Model\ZoneshttppullnewSecuretoken $securetoken securetoken (optional)
     * @param  \Swagger\Client\Model\ZoneshttppullnewSsl $ssl ssl (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20041
     */
    public function createzonevodpullPush($x_api_key, $_method = null, $origin = null, $cnames = null, $cache_cache = null, $live = null, $edge = null, $domainlock = null, $securetoken = null, $ssl = null)
    {
        list($response) = $this->createzonevodpullPushWithHttpInfo($x_api_key, $_method, $origin, $cnames, $cache_cache, $live, $edge, $domainlock, $securetoken, $ssl);
        return $response;
    }

    /**
     * Operation createzonevodpullPushWithHttpInfo
     *
     * Create Zone
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $_method (optional)
     * @param  string $origin (optional)
     * @param  string $cnames (optional)
     * @param  string $cache_cache (optional)
     * @param  string $live (optional)
     * @param  \Swagger\Client\Model\ZoneshttppushnewEdge $edge (optional)
     * @param  \Swagger\Client\Model\ZoneshttppushnewDomainlock $domainlock (optional)
     * @param  \Swagger\Client\Model\ZoneshttppullnewSecuretoken $securetoken (optional)
     * @param  \Swagger\Client\Model\ZoneshttppullnewSsl $ssl (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20041, HTTP status code, HTTP response headers (array of strings)
     */
    public function createzonevodpullPushWithHttpInfo($x_api_key, $_method = null, $origin = null, $cnames = null, $cache_cache = null, $live = null, $edge = null, $domainlock = null, $securetoken = null, $ssl = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20041';
        $request = $this->createzonevodpullPushRequest($x_api_key, $_method, $origin, $cnames, $cache_cache, $live, $edge, $domainlock, $securetoken, $ssl);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20041',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createzonevodpullPushAsync
     *
     * Create Zone
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $_method (optional)
     * @param  string $origin (optional)
     * @param  string $cnames (optional)
     * @param  string $cache_cache (optional)
     * @param  string $live (optional)
     * @param  \Swagger\Client\Model\ZoneshttppushnewEdge $edge (optional)
     * @param  \Swagger\Client\Model\ZoneshttppushnewDomainlock $domainlock (optional)
     * @param  \Swagger\Client\Model\ZoneshttppullnewSecuretoken $securetoken (optional)
     * @param  \Swagger\Client\Model\ZoneshttppullnewSsl $ssl (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createzonevodpullPushAsync($x_api_key, $_method = null, $origin = null, $cnames = null, $cache_cache = null, $live = null, $edge = null, $domainlock = null, $securetoken = null, $ssl = null)
    {
        return $this->createzonevodpullPushAsyncWithHttpInfo($x_api_key, $_method, $origin, $cnames, $cache_cache, $live, $edge, $domainlock, $securetoken, $ssl)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createzonevodpullPushAsyncWithHttpInfo
     *
     * Create Zone
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $_method (optional)
     * @param  string $origin (optional)
     * @param  string $cnames (optional)
     * @param  string $cache_cache (optional)
     * @param  string $live (optional)
     * @param  \Swagger\Client\Model\ZoneshttppushnewEdge $edge (optional)
     * @param  \Swagger\Client\Model\ZoneshttppushnewDomainlock $domainlock (optional)
     * @param  \Swagger\Client\Model\ZoneshttppullnewSecuretoken $securetoken (optional)
     * @param  \Swagger\Client\Model\ZoneshttppullnewSsl $ssl (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createzonevodpullPushAsyncWithHttpInfo($x_api_key, $_method = null, $origin = null, $cnames = null, $cache_cache = null, $live = null, $edge = null, $domainlock = null, $securetoken = null, $ssl = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20041';
        $request = $this->createzonevodpullPushRequest($x_api_key, $_method, $origin, $cnames, $cache_cache, $live, $edge, $domainlock, $securetoken, $ssl);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createzonevodpullPush'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $_method (optional)
     * @param  string $origin (optional)
     * @param  string $cnames (optional)
     * @param  string $cache_cache (optional)
     * @param  string $live (optional)
     * @param  \Swagger\Client\Model\ZoneshttppushnewEdge $edge (optional)
     * @param  \Swagger\Client\Model\ZoneshttppushnewDomainlock $domainlock (optional)
     * @param  \Swagger\Client\Model\ZoneshttppullnewSecuretoken $securetoken (optional)
     * @param  \Swagger\Client\Model\ZoneshttppullnewSsl $ssl (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createzonevodpullPushRequest($x_api_key, $_method = null, $origin = null, $cnames = null, $cache_cache = null, $live = null, $edge = null, $domainlock = null, $securetoken = null, $ssl = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling createzonevodpullPush'
            );
        }

        $resourcePath = '/zones/vod/pull/new';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }


        // form params
        if ($_method !== null) {
            $formParams['_METHOD'] = ObjectSerializer::toFormValue($_method);
        }
        // form params
        if ($origin !== null) {
            $formParams['origin'] = ObjectSerializer::toFormValue($origin);
        }
        // form params
        if ($cnames !== null) {
            $formParams['cnames'] = ObjectSerializer::toFormValue($cnames);
        }
        // form params
        if ($cache_cache !== null) {
            $formParams['cache[cache]'] = ObjectSerializer::toFormValue($cache_cache);
        }
        // form params
        if ($live !== null) {
            $formParams['live'] = ObjectSerializer::toFormValue($live);
        }
        // form params
        if ($edge !== null) {
            $formParams['edge'] = ObjectSerializer::toFormValue($edge);
        }
        // form params
        if ($domainlock !== null) {
            $formParams['domainlock'] = ObjectSerializer::toFormValue($domainlock);
        }
        // form params
        if ($securetoken !== null) {
            $formParams['securetoken'] = ObjectSerializer::toFormValue($securetoken);
        }
        // form params
        if ($ssl !== null) {
            $formParams['ssl'] = ObjectSerializer::toFormValue($ssl);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVodzonepull
     *
     * Zone
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20045
     */
    public function getVodzonepull($x_api_key, $zoneid)
    {
        list($response) = $this->getVodzonepullWithHttpInfo($x_api_key, $zoneid);
        return $response;
    }

    /**
     * Operation getVodzonepullWithHttpInfo
     *
     * Zone
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20045, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVodzonepullWithHttpInfo($x_api_key, $zoneid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20045';
        $request = $this->getVodzonepullRequest($x_api_key, $zoneid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20045',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVodzonepullAsync
     *
     * Zone
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVodzonepullAsync($x_api_key, $zoneid)
    {
        return $this->getVodzonepullAsyncWithHttpInfo($x_api_key, $zoneid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVodzonepullAsyncWithHttpInfo
     *
     * Zone
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVodzonepullAsyncWithHttpInfo($x_api_key, $zoneid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20045';
        $request = $this->getVodzonepullRequest($x_api_key, $zoneid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVodzonepull'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getVodzonepullRequest($x_api_key, $zoneid)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling getVodzonepull'
            );
        }
        // verify the required parameter 'zoneid' is set
        if ($zoneid === null || (is_array($zoneid) && count($zoneid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneid when calling getVodzonepull'
            );
        }

        $resourcePath = '/zones/vod/pull/{zoneid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($zoneid !== null) {
            $resourcePath = str_replace(
                '{' . 'zoneid' . '}',
                ObjectSerializer::toPathValue($zoneid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restorezonevodpull
     *
     * Restore
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2005
     */
    public function restorezonevodpull($x_api_key, $zoneid)
    {
        list($response) = $this->restorezonevodpullWithHttpInfo($x_api_key, $zoneid);
        return $response;
    }

    /**
     * Operation restorezonevodpullWithHttpInfo
     *
     * Restore
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function restorezonevodpullWithHttpInfo($x_api_key, $zoneid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->restorezonevodpullRequest($x_api_key, $zoneid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2005',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restorezonevodpullAsync
     *
     * Restore
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restorezonevodpullAsync($x_api_key, $zoneid)
    {
        return $this->restorezonevodpullAsyncWithHttpInfo($x_api_key, $zoneid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restorezonevodpullAsyncWithHttpInfo
     *
     * Restore
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restorezonevodpullAsyncWithHttpInfo($x_api_key, $zoneid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->restorezonevodpullRequest($x_api_key, $zoneid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restorezonevodpull'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restorezonevodpullRequest($x_api_key, $zoneid)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling restorezonevodpull'
            );
        }
        // verify the required parameter 'zoneid' is set
        if ($zoneid === null || (is_array($zoneid) && count($zoneid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneid when calling restorezonevodpull'
            );
        }

        $resourcePath = '/zones/vod/pull/{zoneid}/restore';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($zoneid !== null) {
            $resourcePath = str_replace(
                '{' . 'zoneid' . '}',
                ObjectSerializer::toPathValue($zoneid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDomainLockzonevodpull
     *
     * Update Domain Lock
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $policy policy (optional)
     * @param  string $list list (optional)
     * @param  string $ips ips (optional)
     * @param  string $type type (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20048
     */
    public function updateDomainLockzonevodpull($x_api_key, $zoneid, $policy = null, $list = null, $ips = null, $type = null)
    {
        list($response) = $this->updateDomainLockzonevodpullWithHttpInfo($x_api_key, $zoneid, $policy, $list, $ips, $type);
        return $response;
    }

    /**
     * Operation updateDomainLockzonevodpullWithHttpInfo
     *
     * Update Domain Lock
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  string $ips (optional)
     * @param  string $type (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20048, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDomainLockzonevodpullWithHttpInfo($x_api_key, $zoneid, $policy = null, $list = null, $ips = null, $type = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20048';
        $request = $this->updateDomainLockzonevodpullRequest($x_api_key, $zoneid, $policy, $list, $ips, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20048',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDomainLockzonevodpullAsync
     *
     * Update Domain Lock
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  string $ips (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDomainLockzonevodpullAsync($x_api_key, $zoneid, $policy = null, $list = null, $ips = null, $type = null)
    {
        return $this->updateDomainLockzonevodpullAsyncWithHttpInfo($x_api_key, $zoneid, $policy, $list, $ips, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDomainLockzonevodpullAsyncWithHttpInfo
     *
     * Update Domain Lock
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  string $ips (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDomainLockzonevodpullAsyncWithHttpInfo($x_api_key, $zoneid, $policy = null, $list = null, $ips = null, $type = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20048';
        $request = $this->updateDomainLockzonevodpullRequest($x_api_key, $zoneid, $policy, $list, $ips, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDomainLockzonevodpull'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  string $ips (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateDomainLockzonevodpullRequest($x_api_key, $zoneid, $policy = null, $list = null, $ips = null, $type = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updateDomainLockzonevodpull'
            );
        }
        // verify the required parameter 'zoneid' is set
        if ($zoneid === null || (is_array($zoneid) && count($zoneid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneid when calling updateDomainLockzonevodpull'
            );
        }

        $resourcePath = '/zones/vod/pull/{zoneid}/domainlock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($zoneid !== null) {
            $resourcePath = str_replace(
                '{' . 'zoneid' . '}',
                ObjectSerializer::toPathValue($zoneid),
                $resourcePath
            );
        }

        // form params
        if ($policy !== null) {
            $formParams['policy'] = ObjectSerializer::toFormValue($policy);
        }
        // form params
        if ($list !== null) {
            $formParams['list'] = ObjectSerializer::toFormValue($list);
        }
        // form params
        if ($ips !== null) {
            $formParams['ips'] = ObjectSerializer::toFormValue($ips);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEdgeSettingszonevodpull
     *
     * Update Edge Settings
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $pseudostreaming pseudostreaming (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20048
     */
    public function updateEdgeSettingszonevodpull($x_api_key, $zoneid, $pseudostreaming = null)
    {
        list($response) = $this->updateEdgeSettingszonevodpullWithHttpInfo($x_api_key, $zoneid, $pseudostreaming);
        return $response;
    }

    /**
     * Operation updateEdgeSettingszonevodpullWithHttpInfo
     *
     * Update Edge Settings
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $pseudostreaming (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20048, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEdgeSettingszonevodpullWithHttpInfo($x_api_key, $zoneid, $pseudostreaming = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20048';
        $request = $this->updateEdgeSettingszonevodpullRequest($x_api_key, $zoneid, $pseudostreaming);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20048',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEdgeSettingszonevodpullAsync
     *
     * Update Edge Settings
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $pseudostreaming (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEdgeSettingszonevodpullAsync($x_api_key, $zoneid, $pseudostreaming = null)
    {
        return $this->updateEdgeSettingszonevodpullAsyncWithHttpInfo($x_api_key, $zoneid, $pseudostreaming)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEdgeSettingszonevodpullAsyncWithHttpInfo
     *
     * Update Edge Settings
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $pseudostreaming (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEdgeSettingszonevodpullAsyncWithHttpInfo($x_api_key, $zoneid, $pseudostreaming = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20048';
        $request = $this->updateEdgeSettingszonevodpullRequest($x_api_key, $zoneid, $pseudostreaming);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEdgeSettingszonevodpull'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $pseudostreaming (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateEdgeSettingszonevodpullRequest($x_api_key, $zoneid, $pseudostreaming = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updateEdgeSettingszonevodpull'
            );
        }
        // verify the required parameter 'zoneid' is set
        if ($zoneid === null || (is_array($zoneid) && count($zoneid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneid when calling updateEdgeSettingszonevodpull'
            );
        }

        $resourcePath = '/zones/vod/pull/{zoneid}/edge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($zoneid !== null) {
            $resourcePath = str_replace(
                '{' . 'zoneid' . '}',
                ObjectSerializer::toPathValue($zoneid),
                $resourcePath
            );
        }

        // form params
        if ($pseudostreaming !== null) {
            $formParams['pseudostreaming'] = ObjectSerializer::toFormValue($pseudostreaming);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateExternalAuthControlzonevodpull
     *
     * Update External Auth Control
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $policy policy (optional)
     * @param  string $authurl authurl (optional)
     * @param  string $ips ips (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20047
     */
    public function updateExternalAuthControlzonevodpull($x_api_key, $zoneid, $policy = null, $authurl = null, $ips = null)
    {
        list($response) = $this->updateExternalAuthControlzonevodpullWithHttpInfo($x_api_key, $zoneid, $policy, $authurl, $ips);
        return $response;
    }

    /**
     * Operation updateExternalAuthControlzonevodpullWithHttpInfo
     *
     * Update External Auth Control
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $policy (optional)
     * @param  string $authurl (optional)
     * @param  string $ips (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20047, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateExternalAuthControlzonevodpullWithHttpInfo($x_api_key, $zoneid, $policy = null, $authurl = null, $ips = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20047';
        $request = $this->updateExternalAuthControlzonevodpullRequest($x_api_key, $zoneid, $policy, $authurl, $ips);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20047',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateExternalAuthControlzonevodpullAsync
     *
     * Update External Auth Control
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $policy (optional)
     * @param  string $authurl (optional)
     * @param  string $ips (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateExternalAuthControlzonevodpullAsync($x_api_key, $zoneid, $policy = null, $authurl = null, $ips = null)
    {
        return $this->updateExternalAuthControlzonevodpullAsyncWithHttpInfo($x_api_key, $zoneid, $policy, $authurl, $ips)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateExternalAuthControlzonevodpullAsyncWithHttpInfo
     *
     * Update External Auth Control
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $policy (optional)
     * @param  string $authurl (optional)
     * @param  string $ips (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateExternalAuthControlzonevodpullAsyncWithHttpInfo($x_api_key, $zoneid, $policy = null, $authurl = null, $ips = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20047';
        $request = $this->updateExternalAuthControlzonevodpullRequest($x_api_key, $zoneid, $policy, $authurl, $ips);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateExternalAuthControlzonevodpull'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $policy (optional)
     * @param  string $authurl (optional)
     * @param  string $ips (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateExternalAuthControlzonevodpullRequest($x_api_key, $zoneid, $policy = null, $authurl = null, $ips = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updateExternalAuthControlzonevodpull'
            );
        }
        // verify the required parameter 'zoneid' is set
        if ($zoneid === null || (is_array($zoneid) && count($zoneid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneid when calling updateExternalAuthControlzonevodpull'
            );
        }

        $resourcePath = '/zones/vod/pull/{zoneid}/eac';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($zoneid !== null) {
            $resourcePath = str_replace(
                '{' . 'zoneid' . '}',
                ObjectSerializer::toPathValue($zoneid),
                $resourcePath
            );
        }

        // form params
        if ($policy !== null) {
            $formParams['policy'] = ObjectSerializer::toFormValue($policy);
        }
        // form params
        if ($authurl !== null) {
            $formParams['authurl'] = ObjectSerializer::toFormValue($authurl);
        }
        // form params
        if ($ips !== null) {
            $formParams['ips'] = ObjectSerializer::toFormValue($ips);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateGeoblockzonevodpull
     *
     * Update Geoblock
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $policy policy (optional)
     * @param  \Swagger\Client\Model\StreamsabrstreamidgeoblockList $list list (optional)
     * @param  string $ips ips (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20046
     */
    public function updateGeoblockzonevodpull($x_api_key, $zoneid, $policy = null, $list = null, $ips = null)
    {
        list($response) = $this->updateGeoblockzonevodpullWithHttpInfo($x_api_key, $zoneid, $policy, $list, $ips);
        return $response;
    }

    /**
     * Operation updateGeoblockzonevodpullWithHttpInfo
     *
     * Update Geoblock
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $policy (optional)
     * @param  \Swagger\Client\Model\StreamsabrstreamidgeoblockList $list (optional)
     * @param  string $ips (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20046, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateGeoblockzonevodpullWithHttpInfo($x_api_key, $zoneid, $policy = null, $list = null, $ips = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20046';
        $request = $this->updateGeoblockzonevodpullRequest($x_api_key, $zoneid, $policy, $list, $ips);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20046',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateGeoblockzonevodpullAsync
     *
     * Update Geoblock
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $policy (optional)
     * @param  \Swagger\Client\Model\StreamsabrstreamidgeoblockList $list (optional)
     * @param  string $ips (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGeoblockzonevodpullAsync($x_api_key, $zoneid, $policy = null, $list = null, $ips = null)
    {
        return $this->updateGeoblockzonevodpullAsyncWithHttpInfo($x_api_key, $zoneid, $policy, $list, $ips)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateGeoblockzonevodpullAsyncWithHttpInfo
     *
     * Update Geoblock
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $policy (optional)
     * @param  \Swagger\Client\Model\StreamsabrstreamidgeoblockList $list (optional)
     * @param  string $ips (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGeoblockzonevodpullAsyncWithHttpInfo($x_api_key, $zoneid, $policy = null, $list = null, $ips = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20046';
        $request = $this->updateGeoblockzonevodpullRequest($x_api_key, $zoneid, $policy, $list, $ips);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateGeoblockzonevodpull'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $policy (optional)
     * @param  \Swagger\Client\Model\StreamsabrstreamidgeoblockList $list (optional)
     * @param  string $ips (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateGeoblockzonevodpullRequest($x_api_key, $zoneid, $policy = null, $list = null, $ips = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updateGeoblockzonevodpull'
            );
        }
        // verify the required parameter 'zoneid' is set
        if ($zoneid === null || (is_array($zoneid) && count($zoneid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneid when calling updateGeoblockzonevodpull'
            );
        }

        $resourcePath = '/zones/vod/pull/{zoneid}/geoblock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($zoneid !== null) {
            $resourcePath = str_replace(
                '{' . 'zoneid' . '}',
                ObjectSerializer::toPathValue($zoneid),
                $resourcePath
            );
        }

        // form params
        if ($policy !== null) {
            $formParams['policy'] = ObjectSerializer::toFormValue($policy);
        }
        // form params
        if ($list !== null) {
            $formParams['list'] = ObjectSerializer::toFormValue($list);
        }
        // form params
        if ($ips !== null) {
            $formParams['ips'] = ObjectSerializer::toFormValue($ips);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSslzonevodpull
     *
     * Update SSL
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $http2 http2 (optional)
     * @param  string $mode mode (optional)
     * @param  string $certid certid (optional)
     * @param  string $name name (optional)
     * @param  string $crt crt (optional)
     * @param  string $key key (optional)
     * @param  string $cabundle cabundle (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20043
     */
    public function updateSslzonevodpull($x_api_key, $zoneid, $http2 = null, $mode = null, $certid = null, $name = null, $crt = null, $key = null, $cabundle = null)
    {
        list($response) = $this->updateSslzonevodpullWithHttpInfo($x_api_key, $zoneid, $http2, $mode, $certid, $name, $crt, $key, $cabundle);
        return $response;
    }

    /**
     * Operation updateSslzonevodpullWithHttpInfo
     *
     * Update SSL
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $http2 (optional)
     * @param  string $mode (optional)
     * @param  string $certid (optional)
     * @param  string $name (optional)
     * @param  string $crt (optional)
     * @param  string $key (optional)
     * @param  string $cabundle (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20043, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSslzonevodpullWithHttpInfo($x_api_key, $zoneid, $http2 = null, $mode = null, $certid = null, $name = null, $crt = null, $key = null, $cabundle = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20043';
        $request = $this->updateSslzonevodpullRequest($x_api_key, $zoneid, $http2, $mode, $certid, $name, $crt, $key, $cabundle);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20043',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSslzonevodpullAsync
     *
     * Update SSL
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $http2 (optional)
     * @param  string $mode (optional)
     * @param  string $certid (optional)
     * @param  string $name (optional)
     * @param  string $crt (optional)
     * @param  string $key (optional)
     * @param  string $cabundle (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSslzonevodpullAsync($x_api_key, $zoneid, $http2 = null, $mode = null, $certid = null, $name = null, $crt = null, $key = null, $cabundle = null)
    {
        return $this->updateSslzonevodpullAsyncWithHttpInfo($x_api_key, $zoneid, $http2, $mode, $certid, $name, $crt, $key, $cabundle)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSslzonevodpullAsyncWithHttpInfo
     *
     * Update SSL
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $http2 (optional)
     * @param  string $mode (optional)
     * @param  string $certid (optional)
     * @param  string $name (optional)
     * @param  string $crt (optional)
     * @param  string $key (optional)
     * @param  string $cabundle (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSslzonevodpullAsyncWithHttpInfo($x_api_key, $zoneid, $http2 = null, $mode = null, $certid = null, $name = null, $crt = null, $key = null, $cabundle = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20043';
        $request = $this->updateSslzonevodpullRequest($x_api_key, $zoneid, $http2, $mode, $certid, $name, $crt, $key, $cabundle);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSslzonevodpull'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $http2 (optional)
     * @param  string $mode (optional)
     * @param  string $certid (optional)
     * @param  string $name (optional)
     * @param  string $crt (optional)
     * @param  string $key (optional)
     * @param  string $cabundle (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSslzonevodpullRequest($x_api_key, $zoneid, $http2 = null, $mode = null, $certid = null, $name = null, $crt = null, $key = null, $cabundle = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updateSslzonevodpull'
            );
        }
        // verify the required parameter 'zoneid' is set
        if ($zoneid === null || (is_array($zoneid) && count($zoneid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneid when calling updateSslzonevodpull'
            );
        }

        $resourcePath = '/zones/vod/pull/{zoneid}/ssl';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($zoneid !== null) {
            $resourcePath = str_replace(
                '{' . 'zoneid' . '}',
                ObjectSerializer::toPathValue($zoneid),
                $resourcePath
            );
        }

        // form params
        if ($http2 !== null) {
            $formParams['http2'] = ObjectSerializer::toFormValue($http2);
        }
        // form params
        if ($mode !== null) {
            $formParams['mode'] = ObjectSerializer::toFormValue($mode);
        }
        // form params
        if ($certid !== null) {
            $formParams['certid'] = ObjectSerializer::toFormValue($certid);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($crt !== null) {
            $formParams['crt'] = ObjectSerializer::toFormValue($crt);
        }
        // form params
        if ($key !== null) {
            $formParams['key'] = ObjectSerializer::toFormValue($key);
        }
        // form params
        if ($cabundle !== null) {
            $formParams['cabundle'] = ObjectSerializer::toFormValue($cabundle);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateinfozonevodpull
     *
     * Update Info
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $cnames cnames (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20045
     */
    public function updateinfozonevodpull($x_api_key, $zoneid, $cnames = null)
    {
        list($response) = $this->updateinfozonevodpullWithHttpInfo($x_api_key, $zoneid, $cnames);
        return $response;
    }

    /**
     * Operation updateinfozonevodpullWithHttpInfo
     *
     * Update Info
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $cnames (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20045, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateinfozonevodpullWithHttpInfo($x_api_key, $zoneid, $cnames = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20045';
        $request = $this->updateinfozonevodpullRequest($x_api_key, $zoneid, $cnames);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20045',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateinfozonevodpullAsync
     *
     * Update Info
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $cnames (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateinfozonevodpullAsync($x_api_key, $zoneid, $cnames = null)
    {
        return $this->updateinfozonevodpullAsyncWithHttpInfo($x_api_key, $zoneid, $cnames)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateinfozonevodpullAsyncWithHttpInfo
     *
     * Update Info
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $cnames (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateinfozonevodpullAsyncWithHttpInfo($x_api_key, $zoneid, $cnames = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20045';
        $request = $this->updateinfozonevodpullRequest($x_api_key, $zoneid, $cnames);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateinfozonevodpull'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $cnames (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateinfozonevodpullRequest($x_api_key, $zoneid, $cnames = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updateinfozonevodpull'
            );
        }
        // verify the required parameter 'zoneid' is set
        if ($zoneid === null || (is_array($zoneid) && count($zoneid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneid when calling updateinfozonevodpull'
            );
        }

        $resourcePath = '/zones/vod/pull/{zoneid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($zoneid !== null) {
            $resourcePath = str_replace(
                '{' . 'zoneid' . '}',
                ObjectSerializer::toPathValue($zoneid),
                $resourcePath
            );
        }

        // form params
        if ($cnames !== null) {
            $formParams['cnames'] = ObjectSerializer::toFormValue($cnames);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation zonevodpullCachePurge
     *
     * Purge
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $_method _method (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2005
     */
    public function zonevodpullCachePurge($x_api_key, $zoneid, $_method = null)
    {
        list($response) = $this->zonevodpullCachePurgeWithHttpInfo($x_api_key, $zoneid, $_method);
        return $response;
    }

    /**
     * Operation zonevodpullCachePurgeWithHttpInfo
     *
     * Purge
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $_method (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function zonevodpullCachePurgeWithHttpInfo($x_api_key, $zoneid, $_method = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->zonevodpullCachePurgeRequest($x_api_key, $zoneid, $_method);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2005',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zonevodpullCachePurgeAsync
     *
     * Purge
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $_method (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function zonevodpullCachePurgeAsync($x_api_key, $zoneid, $_method = null)
    {
        return $this->zonevodpullCachePurgeAsyncWithHttpInfo($x_api_key, $zoneid, $_method)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zonevodpullCachePurgeAsyncWithHttpInfo
     *
     * Purge
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $_method (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function zonevodpullCachePurgeAsyncWithHttpInfo($x_api_key, $zoneid, $_method = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->zonevodpullCachePurgeRequest($x_api_key, $zoneid, $_method);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'zonevodpullCachePurge'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $_method (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function zonevodpullCachePurgeRequest($x_api_key, $zoneid, $_method = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling zonevodpullCachePurge'
            );
        }
        // verify the required parameter 'zoneid' is set
        if ($zoneid === null || (is_array($zoneid) && count($zoneid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneid when calling zonevodpullCachePurge'
            );
        }

        $resourcePath = '/zones/vod/pull/{zoneid}/purge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($zoneid !== null) {
            $resourcePath = str_replace(
                '{' . 'zoneid' . '}',
                ObjectSerializer::toPathValue($zoneid),
                $resourcePath
            );
        }

        // form params
        if ($_method !== null) {
            $formParams['_METHOD'] = ObjectSerializer::toFormValue($_method);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation zonevodpullPushList
     *
     * VoD Push
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20036
     */
    public function zonevodpullPushList($x_api_key)
    {
        list($response) = $this->zonevodpullPushListWithHttpInfo($x_api_key);
        return $response;
    }

    /**
     * Operation zonevodpullPushListWithHttpInfo
     *
     * VoD Push
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20036, HTTP status code, HTTP response headers (array of strings)
     */
    public function zonevodpullPushListWithHttpInfo($x_api_key)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20036';
        $request = $this->zonevodpullPushListRequest($x_api_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20036',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation zonevodpullPushListAsync
     *
     * VoD Push
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function zonevodpullPushListAsync($x_api_key)
    {
        return $this->zonevodpullPushListAsyncWithHttpInfo($x_api_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation zonevodpullPushListAsyncWithHttpInfo
     *
     * VoD Push
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function zonevodpullPushListAsyncWithHttpInfo($x_api_key)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20036';
        $request = $this->zonevodpullPushListRequest($x_api_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'zonevodpullPushList'
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function zonevodpullPushListRequest($x_api_key)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling zonevodpullPushList'
            );
        }

        $resourcePath = '/zones/vod/pull';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
