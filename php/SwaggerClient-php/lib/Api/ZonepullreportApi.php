<?php
/**
 * ZonepullreportApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 5centscdn API
 *
 * This is a simple API
 *
 * OpenAPI spec version: 2.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.5
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ZonepullreportApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ZonepullreportApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation reportsByZonePullBrowsers
     *
     * Reports by zone pull browsers
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency frequency (optional)
     * @param  string $start_date start_date (optional)
     * @param  string $end_date end_date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20050
     */
    public function reportsByZonePullBrowsers($x_api_key, $zoneid, $frequency = null, $start_date = null, $end_date = null)
    {
        list($response) = $this->reportsByZonePullBrowsersWithHttpInfo($x_api_key, $zoneid, $frequency, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation reportsByZonePullBrowsersWithHttpInfo
     *
     * Reports by zone pull browsers
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20050, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsByZonePullBrowsersWithHttpInfo($x_api_key, $zoneid, $frequency = null, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20050';
        $request = $this->reportsByZonePullBrowsersRequest($x_api_key, $zoneid, $frequency, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20050',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsByZonePullBrowsersAsync
     *
     * Reports by zone pull browsers
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsByZonePullBrowsersAsync($x_api_key, $zoneid, $frequency = null, $start_date = null, $end_date = null)
    {
        return $this->reportsByZonePullBrowsersAsyncWithHttpInfo($x_api_key, $zoneid, $frequency, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsByZonePullBrowsersAsyncWithHttpInfo
     *
     * Reports by zone pull browsers
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsByZonePullBrowsersAsyncWithHttpInfo($x_api_key, $zoneid, $frequency = null, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20050';
        $request = $this->reportsByZonePullBrowsersRequest($x_api_key, $zoneid, $frequency, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsByZonePullBrowsers'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsByZonePullBrowsersRequest($x_api_key, $zoneid, $frequency = null, $start_date = null, $end_date = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling reportsByZonePullBrowsers'
            );
        }
        // verify the required parameter 'zoneid' is set
        if ($zoneid === null || (is_array($zoneid) && count($zoneid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneid when calling reportsByZonePullBrowsers'
            );
        }

        $resourcePath = '/zones/reports/http/pull/{zoneid}/on/browsers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($zoneid !== null) {
            $resourcePath = str_replace(
                '{' . 'zoneid' . '}',
                ObjectSerializer::toPathValue($zoneid),
                $resourcePath
            );
        }

        // form params
        if ($frequency !== null) {
            $formParams['frequency'] = ObjectSerializer::toFormValue($frequency);
        }
        // form params
        if ($start_date !== null) {
            $formParams['start_date'] = ObjectSerializer::toFormValue($start_date);
        }
        // form params
        if ($end_date !== null) {
            $formParams['end_date'] = ObjectSerializer::toFormValue($end_date);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsByZonePullCache
     *
     * Reports by zone pull cache
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency frequency (optional)
     * @param  string $filter_type filter_type (optional)
     * @param  string $start_date start_date (optional)
     * @param  string $end_date end_date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20022
     */
    public function reportsByZonePullCache($x_api_key, $zoneid, $frequency = null, $filter_type = null, $start_date = null, $end_date = null)
    {
        list($response) = $this->reportsByZonePullCacheWithHttpInfo($x_api_key, $zoneid, $frequency, $filter_type, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation reportsByZonePullCacheWithHttpInfo
     *
     * Reports by zone pull cache
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency (optional)
     * @param  string $filter_type (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20022, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsByZonePullCacheWithHttpInfo($x_api_key, $zoneid, $frequency = null, $filter_type = null, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20022';
        $request = $this->reportsByZonePullCacheRequest($x_api_key, $zoneid, $frequency, $filter_type, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20022',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsByZonePullCacheAsync
     *
     * Reports by zone pull cache
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency (optional)
     * @param  string $filter_type (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsByZonePullCacheAsync($x_api_key, $zoneid, $frequency = null, $filter_type = null, $start_date = null, $end_date = null)
    {
        return $this->reportsByZonePullCacheAsyncWithHttpInfo($x_api_key, $zoneid, $frequency, $filter_type, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsByZonePullCacheAsyncWithHttpInfo
     *
     * Reports by zone pull cache
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency (optional)
     * @param  string $filter_type (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsByZonePullCacheAsyncWithHttpInfo($x_api_key, $zoneid, $frequency = null, $filter_type = null, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20022';
        $request = $this->reportsByZonePullCacheRequest($x_api_key, $zoneid, $frequency, $filter_type, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsByZonePullCache'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency (optional)
     * @param  string $filter_type (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsByZonePullCacheRequest($x_api_key, $zoneid, $frequency = null, $filter_type = null, $start_date = null, $end_date = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling reportsByZonePullCache'
            );
        }
        // verify the required parameter 'zoneid' is set
        if ($zoneid === null || (is_array($zoneid) && count($zoneid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneid when calling reportsByZonePullCache'
            );
        }

        $resourcePath = '/zones/reports/http/pull/{zoneid}/on/cache';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($zoneid !== null) {
            $resourcePath = str_replace(
                '{' . 'zoneid' . '}',
                ObjectSerializer::toPathValue($zoneid),
                $resourcePath
            );
        }

        // form params
        if ($frequency !== null) {
            $formParams['frequency'] = ObjectSerializer::toFormValue($frequency);
        }
        // form params
        if ($filter_type !== null) {
            $formParams['filter_type'] = ObjectSerializer::toFormValue($filter_type);
        }
        // form params
        if ($start_date !== null) {
            $formParams['start_date'] = ObjectSerializer::toFormValue($start_date);
        }
        // form params
        if ($end_date !== null) {
            $formParams['end_date'] = ObjectSerializer::toFormValue($end_date);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsByZonePullCountry
     *
     * Reports by zone pull country
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency frequency (optional)
     * @param  string $start_date start_date (optional)
     * @param  string $end_date end_date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20049
     */
    public function reportsByZonePullCountry($x_api_key, $zoneid, $frequency = null, $start_date = null, $end_date = null)
    {
        list($response) = $this->reportsByZonePullCountryWithHttpInfo($x_api_key, $zoneid, $frequency, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation reportsByZonePullCountryWithHttpInfo
     *
     * Reports by zone pull country
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20049, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsByZonePullCountryWithHttpInfo($x_api_key, $zoneid, $frequency = null, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20049';
        $request = $this->reportsByZonePullCountryRequest($x_api_key, $zoneid, $frequency, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20049',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsByZonePullCountryAsync
     *
     * Reports by zone pull country
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsByZonePullCountryAsync($x_api_key, $zoneid, $frequency = null, $start_date = null, $end_date = null)
    {
        return $this->reportsByZonePullCountryAsyncWithHttpInfo($x_api_key, $zoneid, $frequency, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsByZonePullCountryAsyncWithHttpInfo
     *
     * Reports by zone pull country
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsByZonePullCountryAsyncWithHttpInfo($x_api_key, $zoneid, $frequency = null, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20049';
        $request = $this->reportsByZonePullCountryRequest($x_api_key, $zoneid, $frequency, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsByZonePullCountry'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsByZonePullCountryRequest($x_api_key, $zoneid, $frequency = null, $start_date = null, $end_date = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling reportsByZonePullCountry'
            );
        }
        // verify the required parameter 'zoneid' is set
        if ($zoneid === null || (is_array($zoneid) && count($zoneid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneid when calling reportsByZonePullCountry'
            );
        }

        $resourcePath = '/zones/reports/http/pull/{zoneid}/on/countries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($zoneid !== null) {
            $resourcePath = str_replace(
                '{' . 'zoneid' . '}',
                ObjectSerializer::toPathValue($zoneid),
                $resourcePath
            );
        }

        // form params
        if ($frequency !== null) {
            $formParams['frequency'] = ObjectSerializer::toFormValue($frequency);
        }
        // form params
        if ($start_date !== null) {
            $formParams['start_date'] = ObjectSerializer::toFormValue($start_date);
        }
        // form params
        if ($end_date !== null) {
            $formParams['end_date'] = ObjectSerializer::toFormValue($end_date);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsByZonePullOs
     *
     * Reports by zone pull os
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency frequency (optional)
     * @param  string $start_date start_date (optional)
     * @param  string $end_date end_date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20051
     */
    public function reportsByZonePullOs($x_api_key, $zoneid, $frequency = null, $start_date = null, $end_date = null)
    {
        list($response) = $this->reportsByZonePullOsWithHttpInfo($x_api_key, $zoneid, $frequency, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation reportsByZonePullOsWithHttpInfo
     *
     * Reports by zone pull os
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20051, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsByZonePullOsWithHttpInfo($x_api_key, $zoneid, $frequency = null, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20051';
        $request = $this->reportsByZonePullOsRequest($x_api_key, $zoneid, $frequency, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20051',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsByZonePullOsAsync
     *
     * Reports by zone pull os
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsByZonePullOsAsync($x_api_key, $zoneid, $frequency = null, $start_date = null, $end_date = null)
    {
        return $this->reportsByZonePullOsAsyncWithHttpInfo($x_api_key, $zoneid, $frequency, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsByZonePullOsAsyncWithHttpInfo
     *
     * Reports by zone pull os
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsByZonePullOsAsyncWithHttpInfo($x_api_key, $zoneid, $frequency = null, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20051';
        $request = $this->reportsByZonePullOsRequest($x_api_key, $zoneid, $frequency, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsByZonePullOs'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsByZonePullOsRequest($x_api_key, $zoneid, $frequency = null, $start_date = null, $end_date = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling reportsByZonePullOs'
            );
        }
        // verify the required parameter 'zoneid' is set
        if ($zoneid === null || (is_array($zoneid) && count($zoneid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneid when calling reportsByZonePullOs'
            );
        }

        $resourcePath = '/zones/reports/http/pull/{zoneid}/on/os';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($zoneid !== null) {
            $resourcePath = str_replace(
                '{' . 'zoneid' . '}',
                ObjectSerializer::toPathValue($zoneid),
                $resourcePath
            );
        }

        // form params
        if ($frequency !== null) {
            $formParams['frequency'] = ObjectSerializer::toFormValue($frequency);
        }
        // form params
        if ($start_date !== null) {
            $formParams['start_date'] = ObjectSerializer::toFormValue($start_date);
        }
        // form params
        if ($end_date !== null) {
            $formParams['end_date'] = ObjectSerializer::toFormValue($end_date);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsByZonePullStatuscodes
     *
     * Reports by zone pull statuscodes
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency frequency (optional)
     * @param  string $start_date start_date (optional)
     * @param  string $end_date end_date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20026
     */
    public function reportsByZonePullStatuscodes($x_api_key, $zoneid, $frequency = null, $start_date = null, $end_date = null)
    {
        list($response) = $this->reportsByZonePullStatuscodesWithHttpInfo($x_api_key, $zoneid, $frequency, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation reportsByZonePullStatuscodesWithHttpInfo
     *
     * Reports by zone pull statuscodes
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20026, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsByZonePullStatuscodesWithHttpInfo($x_api_key, $zoneid, $frequency = null, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20026';
        $request = $this->reportsByZonePullStatuscodesRequest($x_api_key, $zoneid, $frequency, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20026',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsByZonePullStatuscodesAsync
     *
     * Reports by zone pull statuscodes
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsByZonePullStatuscodesAsync($x_api_key, $zoneid, $frequency = null, $start_date = null, $end_date = null)
    {
        return $this->reportsByZonePullStatuscodesAsyncWithHttpInfo($x_api_key, $zoneid, $frequency, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsByZonePullStatuscodesAsyncWithHttpInfo
     *
     * Reports by zone pull statuscodes
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsByZonePullStatuscodesAsyncWithHttpInfo($x_api_key, $zoneid, $frequency = null, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20026';
        $request = $this->reportsByZonePullStatuscodesRequest($x_api_key, $zoneid, $frequency, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsByZonePullStatuscodes'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsByZonePullStatuscodesRequest($x_api_key, $zoneid, $frequency = null, $start_date = null, $end_date = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling reportsByZonePullStatuscodes'
            );
        }
        // verify the required parameter 'zoneid' is set
        if ($zoneid === null || (is_array($zoneid) && count($zoneid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneid when calling reportsByZonePullStatuscodes'
            );
        }

        $resourcePath = '/zones/reports/http/pull/{zoneid}/on/statuscodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($zoneid !== null) {
            $resourcePath = str_replace(
                '{' . 'zoneid' . '}',
                ObjectSerializer::toPathValue($zoneid),
                $resourcePath
            );
        }

        // form params
        if ($frequency !== null) {
            $formParams['frequency'] = ObjectSerializer::toFormValue($frequency);
        }
        // form params
        if ($start_date !== null) {
            $formParams['start_date'] = ObjectSerializer::toFormValue($start_date);
        }
        // form params
        if ($end_date !== null) {
            $formParams['end_date'] = ObjectSerializer::toFormValue($end_date);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsByZonePullSummary
     *
     * Reports by zone pull Summary
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $range range (optional)
     * @param  string $type type (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20021
     */
    public function reportsByZonePullSummary($x_api_key, $zoneid, $range = null, $type = null)
    {
        list($response) = $this->reportsByZonePullSummaryWithHttpInfo($x_api_key, $zoneid, $range, $type);
        return $response;
    }

    /**
     * Operation reportsByZonePullSummaryWithHttpInfo
     *
     * Reports by zone pull Summary
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $range (optional)
     * @param  string $type (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20021, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsByZonePullSummaryWithHttpInfo($x_api_key, $zoneid, $range = null, $type = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20021';
        $request = $this->reportsByZonePullSummaryRequest($x_api_key, $zoneid, $range, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20021',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsByZonePullSummaryAsync
     *
     * Reports by zone pull Summary
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $range (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsByZonePullSummaryAsync($x_api_key, $zoneid, $range = null, $type = null)
    {
        return $this->reportsByZonePullSummaryAsyncWithHttpInfo($x_api_key, $zoneid, $range, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsByZonePullSummaryAsyncWithHttpInfo
     *
     * Reports by zone pull Summary
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $range (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsByZonePullSummaryAsyncWithHttpInfo($x_api_key, $zoneid, $range = null, $type = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20021';
        $request = $this->reportsByZonePullSummaryRequest($x_api_key, $zoneid, $range, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsByZonePullSummary'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $range (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsByZonePullSummaryRequest($x_api_key, $zoneid, $range = null, $type = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling reportsByZonePullSummary'
            );
        }
        // verify the required parameter 'zoneid' is set
        if ($zoneid === null || (is_array($zoneid) && count($zoneid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneid when calling reportsByZonePullSummary'
            );
        }

        $resourcePath = '/zones/reports/http/pull/{zoneid}/on/stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($zoneid !== null) {
            $resourcePath = str_replace(
                '{' . 'zoneid' . '}',
                ObjectSerializer::toPathValue($zoneid),
                $resourcePath
            );
        }

        // form params
        if ($range !== null) {
            $formParams['range'] = ObjectSerializer::toFormValue($range);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsByZonePullTopfiles
     *
     * Reports by zone pull topfiles
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $start_date start_date (optional)
     * @param  string $end_date end_date (optional)
     * @param  string $type type (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20023
     */
    public function reportsByZonePullTopfiles($x_api_key, $zoneid, $start_date = null, $end_date = null, $type = null)
    {
        list($response) = $this->reportsByZonePullTopfilesWithHttpInfo($x_api_key, $zoneid, $start_date, $end_date, $type);
        return $response;
    }

    /**
     * Operation reportsByZonePullTopfilesWithHttpInfo
     *
     * Reports by zone pull topfiles
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     * @param  string $type (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20023, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsByZonePullTopfilesWithHttpInfo($x_api_key, $zoneid, $start_date = null, $end_date = null, $type = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20023';
        $request = $this->reportsByZonePullTopfilesRequest($x_api_key, $zoneid, $start_date, $end_date, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20023',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsByZonePullTopfilesAsync
     *
     * Reports by zone pull topfiles
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsByZonePullTopfilesAsync($x_api_key, $zoneid, $start_date = null, $end_date = null, $type = null)
    {
        return $this->reportsByZonePullTopfilesAsyncWithHttpInfo($x_api_key, $zoneid, $start_date, $end_date, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsByZonePullTopfilesAsyncWithHttpInfo
     *
     * Reports by zone pull topfiles
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsByZonePullTopfilesAsyncWithHttpInfo($x_api_key, $zoneid, $start_date = null, $end_date = null, $type = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20023';
        $request = $this->reportsByZonePullTopfilesRequest($x_api_key, $zoneid, $start_date, $end_date, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsByZonePullTopfiles'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsByZonePullTopfilesRequest($x_api_key, $zoneid, $start_date = null, $end_date = null, $type = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling reportsByZonePullTopfiles'
            );
        }
        // verify the required parameter 'zoneid' is set
        if ($zoneid === null || (is_array($zoneid) && count($zoneid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneid when calling reportsByZonePullTopfiles'
            );
        }

        $resourcePath = '/zones/reports/http/pull/{zoneid}/on/topfiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($zoneid !== null) {
            $resourcePath = str_replace(
                '{' . 'zoneid' . '}',
                ObjectSerializer::toPathValue($zoneid),
                $resourcePath
            );
        }

        // form params
        if ($start_date !== null) {
            $formParams['start_date'] = ObjectSerializer::toFormValue($start_date);
        }
        // form params
        if ($end_date !== null) {
            $formParams['end_date'] = ObjectSerializer::toFormValue($end_date);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsByZonePullTopreferrers
     *
     * Reports by zone pull topreferrers
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $start_date start_date (optional)
     * @param  string $end_date end_date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20025
     */
    public function reportsByZonePullTopreferrers($x_api_key, $zoneid, $start_date = null, $end_date = null)
    {
        list($response) = $this->reportsByZonePullTopreferrersWithHttpInfo($x_api_key, $zoneid, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation reportsByZonePullTopreferrersWithHttpInfo
     *
     * Reports by zone pull topreferrers
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20025, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsByZonePullTopreferrersWithHttpInfo($x_api_key, $zoneid, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20025';
        $request = $this->reportsByZonePullTopreferrersRequest($x_api_key, $zoneid, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20025',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsByZonePullTopreferrersAsync
     *
     * Reports by zone pull topreferrers
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsByZonePullTopreferrersAsync($x_api_key, $zoneid, $start_date = null, $end_date = null)
    {
        return $this->reportsByZonePullTopreferrersAsyncWithHttpInfo($x_api_key, $zoneid, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsByZonePullTopreferrersAsyncWithHttpInfo
     *
     * Reports by zone pull topreferrers
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsByZonePullTopreferrersAsyncWithHttpInfo($x_api_key, $zoneid, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20025';
        $request = $this->reportsByZonePullTopreferrersRequest($x_api_key, $zoneid, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsByZonePullTopreferrers'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsByZonePullTopreferrersRequest($x_api_key, $zoneid, $start_date = null, $end_date = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling reportsByZonePullTopreferrers'
            );
        }
        // verify the required parameter 'zoneid' is set
        if ($zoneid === null || (is_array($zoneid) && count($zoneid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneid when calling reportsByZonePullTopreferrers'
            );
        }

        $resourcePath = '/zones/reports/http/pull/{zoneid}/on/topreferrers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($zoneid !== null) {
            $resourcePath = str_replace(
                '{' . 'zoneid' . '}',
                ObjectSerializer::toPathValue($zoneid),
                $resourcePath
            );
        }

        // form params
        if ($start_date !== null) {
            $formParams['start_date'] = ObjectSerializer::toFormValue($start_date);
        }
        // form params
        if ($end_date !== null) {
            $formParams['end_date'] = ObjectSerializer::toFormValue($end_date);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reportsByZonePullVisitors
     *
     * Reports by zone pull visitors
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency frequency (optional)
     * @param  string $start_date start_date (optional)
     * @param  string $end_date end_date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20052
     */
    public function reportsByZonePullVisitors($x_api_key, $zoneid, $frequency = null, $start_date = null, $end_date = null)
    {
        list($response) = $this->reportsByZonePullVisitorsWithHttpInfo($x_api_key, $zoneid, $frequency, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation reportsByZonePullVisitorsWithHttpInfo
     *
     * Reports by zone pull visitors
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20052, HTTP status code, HTTP response headers (array of strings)
     */
    public function reportsByZonePullVisitorsWithHttpInfo($x_api_key, $zoneid, $frequency = null, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20052';
        $request = $this->reportsByZonePullVisitorsRequest($x_api_key, $zoneid, $frequency, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20052',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reportsByZonePullVisitorsAsync
     *
     * Reports by zone pull visitors
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsByZonePullVisitorsAsync($x_api_key, $zoneid, $frequency = null, $start_date = null, $end_date = null)
    {
        return $this->reportsByZonePullVisitorsAsyncWithHttpInfo($x_api_key, $zoneid, $frequency, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reportsByZonePullVisitorsAsyncWithHttpInfo
     *
     * Reports by zone pull visitors
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reportsByZonePullVisitorsAsyncWithHttpInfo($x_api_key, $zoneid, $frequency = null, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20052';
        $request = $this->reportsByZonePullVisitorsRequest($x_api_key, $zoneid, $frequency, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reportsByZonePullVisitors'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $zoneid Zone ID (required)
     * @param  string $frequency (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reportsByZonePullVisitorsRequest($x_api_key, $zoneid, $frequency = null, $start_date = null, $end_date = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling reportsByZonePullVisitors'
            );
        }
        // verify the required parameter 'zoneid' is set
        if ($zoneid === null || (is_array($zoneid) && count($zoneid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $zoneid when calling reportsByZonePullVisitors'
            );
        }

        $resourcePath = '/zones/reports/http/pull/{zoneid}/on/visitors';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($zoneid !== null) {
            $resourcePath = str_replace(
                '{' . 'zoneid' . '}',
                ObjectSerializer::toPathValue($zoneid),
                $resourcePath
            );
        }

        // form params
        if ($frequency !== null) {
            $formParams['frequency'] = ObjectSerializer::toFormValue($frequency);
        }
        // form params
        if ($start_date !== null) {
            $formParams['start_date'] = ObjectSerializer::toFormValue($start_date);
        }
        // form params
        if ($end_date !== null) {
            $formParams['end_date'] = ObjectSerializer::toFormValue($end_date);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
