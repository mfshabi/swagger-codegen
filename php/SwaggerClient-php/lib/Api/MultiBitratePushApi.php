<?php
/**
 * MultiBitratePushApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 5centscdn API
 *
 * This is a simple API
 *
 * OpenAPI spec version: 2.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.5
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * MultiBitratePushApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MultiBitratePushApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getDetailsMultiBitratePush
     *
     * Stream
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20011
     */
    public function getDetailsMultiBitratePush($x_api_key, $streamid)
    {
        list($response) = $this->getDetailsMultiBitratePushWithHttpInfo($x_api_key, $streamid);
        return $response;
    }

    /**
     * Operation getDetailsMultiBitratePushWithHttpInfo
     *
     * Stream
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20011, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDetailsMultiBitratePushWithHttpInfo($x_api_key, $streamid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20011';
        $request = $this->getDetailsMultiBitratePushRequest($x_api_key, $streamid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20011',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDetailsMultiBitratePushAsync
     *
     * Stream
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDetailsMultiBitratePushAsync($x_api_key, $streamid)
    {
        return $this->getDetailsMultiBitratePushAsyncWithHttpInfo($x_api_key, $streamid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDetailsMultiBitratePushAsyncWithHttpInfo
     *
     * Stream
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDetailsMultiBitratePushAsyncWithHttpInfo($x_api_key, $streamid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20011';
        $request = $this->getDetailsMultiBitratePushRequest($x_api_key, $streamid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDetailsMultiBitratePush'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDetailsMultiBitratePushRequest($x_api_key, $streamid)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling getDetailsMultiBitratePush'
            );
        }
        // verify the required parameter 'streamid' is set
        if ($streamid === null || (is_array($streamid) && count($streamid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $streamid when calling getDetailsMultiBitratePush'
            );
        }

        $resourcePath = '/streams/abr/{streamid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($streamid !== null) {
            $resourcePath = str_replace(
                '{' . 'streamid' . '}',
                ObjectSerializer::toPathValue($streamid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation multiBitratePushCreate
     *
     * Create ABR
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $_method _method (optional)
     * @param  string $name name (optional)
     * @param  string $server server (optional)
     * @param  string $audioonly audioonly (optional)
     * @param  string $profile profile (optional)
     * @param  string $parentid parentid (optional)
     * @param  string $ssl ssl (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewAbr $abr abr (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewDomainlock $domainlock domainlock (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewGeoblock $geoblock geoblock (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewRtmpauth $rtmpauth rtmpauth (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewEac $eac eac (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20010
     */
    public function multiBitratePushCreate($x_api_key, $_method = null, $name = null, $server = null, $audioonly = null, $profile = null, $parentid = null, $ssl = null, $abr = null, $domainlock = null, $geoblock = null, $rtmpauth = null, $eac = null)
    {
        list($response) = $this->multiBitratePushCreateWithHttpInfo($x_api_key, $_method, $name, $server, $audioonly, $profile, $parentid, $ssl, $abr, $domainlock, $geoblock, $rtmpauth, $eac);
        return $response;
    }

    /**
     * Operation multiBitratePushCreateWithHttpInfo
     *
     * Create ABR
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $_method (optional)
     * @param  string $name (optional)
     * @param  string $server (optional)
     * @param  string $audioonly (optional)
     * @param  string $profile (optional)
     * @param  string $parentid (optional)
     * @param  string $ssl (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewAbr $abr (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewDomainlock $domainlock (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewGeoblock $geoblock (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewRtmpauth $rtmpauth (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewEac $eac (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20010, HTTP status code, HTTP response headers (array of strings)
     */
    public function multiBitratePushCreateWithHttpInfo($x_api_key, $_method = null, $name = null, $server = null, $audioonly = null, $profile = null, $parentid = null, $ssl = null, $abr = null, $domainlock = null, $geoblock = null, $rtmpauth = null, $eac = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20010';
        $request = $this->multiBitratePushCreateRequest($x_api_key, $_method, $name, $server, $audioonly, $profile, $parentid, $ssl, $abr, $domainlock, $geoblock, $rtmpauth, $eac);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20010',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation multiBitratePushCreateAsync
     *
     * Create ABR
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $_method (optional)
     * @param  string $name (optional)
     * @param  string $server (optional)
     * @param  string $audioonly (optional)
     * @param  string $profile (optional)
     * @param  string $parentid (optional)
     * @param  string $ssl (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewAbr $abr (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewDomainlock $domainlock (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewGeoblock $geoblock (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewRtmpauth $rtmpauth (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewEac $eac (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function multiBitratePushCreateAsync($x_api_key, $_method = null, $name = null, $server = null, $audioonly = null, $profile = null, $parentid = null, $ssl = null, $abr = null, $domainlock = null, $geoblock = null, $rtmpauth = null, $eac = null)
    {
        return $this->multiBitratePushCreateAsyncWithHttpInfo($x_api_key, $_method, $name, $server, $audioonly, $profile, $parentid, $ssl, $abr, $domainlock, $geoblock, $rtmpauth, $eac)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation multiBitratePushCreateAsyncWithHttpInfo
     *
     * Create ABR
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $_method (optional)
     * @param  string $name (optional)
     * @param  string $server (optional)
     * @param  string $audioonly (optional)
     * @param  string $profile (optional)
     * @param  string $parentid (optional)
     * @param  string $ssl (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewAbr $abr (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewDomainlock $domainlock (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewGeoblock $geoblock (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewRtmpauth $rtmpauth (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewEac $eac (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function multiBitratePushCreateAsyncWithHttpInfo($x_api_key, $_method = null, $name = null, $server = null, $audioonly = null, $profile = null, $parentid = null, $ssl = null, $abr = null, $domainlock = null, $geoblock = null, $rtmpauth = null, $eac = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20010';
        $request = $this->multiBitratePushCreateRequest($x_api_key, $_method, $name, $server, $audioonly, $profile, $parentid, $ssl, $abr, $domainlock, $geoblock, $rtmpauth, $eac);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'multiBitratePushCreate'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $_method (optional)
     * @param  string $name (optional)
     * @param  string $server (optional)
     * @param  string $audioonly (optional)
     * @param  string $profile (optional)
     * @param  string $parentid (optional)
     * @param  string $ssl (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewAbr $abr (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewDomainlock $domainlock (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewGeoblock $geoblock (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewRtmpauth $rtmpauth (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewEac $eac (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function multiBitratePushCreateRequest($x_api_key, $_method = null, $name = null, $server = null, $audioonly = null, $profile = null, $parentid = null, $ssl = null, $abr = null, $domainlock = null, $geoblock = null, $rtmpauth = null, $eac = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling multiBitratePushCreate'
            );
        }

        $resourcePath = '/streams/abr/new';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }


        // form params
        if ($_method !== null) {
            $formParams['_METHOD'] = ObjectSerializer::toFormValue($_method);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($server !== null) {
            $formParams['server'] = ObjectSerializer::toFormValue($server);
        }
        // form params
        if ($audioonly !== null) {
            $formParams['audioonly'] = ObjectSerializer::toFormValue($audioonly);
        }
        // form params
        if ($profile !== null) {
            $formParams['profile[]'] = ObjectSerializer::toFormValue($profile);
        }
        // form params
        if ($parentid !== null) {
            $formParams['parentid'] = ObjectSerializer::toFormValue($parentid);
        }
        // form params
        if ($ssl !== null) {
            $formParams['ssl'] = ObjectSerializer::toFormValue($ssl);
        }
        // form params
        if ($abr !== null) {
            $formParams['abr'] = ObjectSerializer::toFormValue($abr);
        }
        // form params
        if ($domainlock !== null) {
            $formParams['domainlock'] = ObjectSerializer::toFormValue($domainlock);
        }
        // form params
        if ($geoblock !== null) {
            $formParams['geoblock'] = ObjectSerializer::toFormValue($geoblock);
        }
        // form params
        if ($rtmpauth !== null) {
            $formParams['rtmpauth'] = ObjectSerializer::toFormValue($rtmpauth);
        }
        // form params
        if ($eac !== null) {
            $formParams['eac'] = ObjectSerializer::toFormValue($eac);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation multiBitratePushlist
     *
     * ABR
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20010
     */
    public function multiBitratePushlist($x_api_key)
    {
        list($response) = $this->multiBitratePushlistWithHttpInfo($x_api_key);
        return $response;
    }

    /**
     * Operation multiBitratePushlistWithHttpInfo
     *
     * ABR
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20010, HTTP status code, HTTP response headers (array of strings)
     */
    public function multiBitratePushlistWithHttpInfo($x_api_key)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20010';
        $request = $this->multiBitratePushlistRequest($x_api_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20010',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation multiBitratePushlistAsync
     *
     * ABR
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function multiBitratePushlistAsync($x_api_key)
    {
        return $this->multiBitratePushlistAsyncWithHttpInfo($x_api_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation multiBitratePushlistAsyncWithHttpInfo
     *
     * ABR
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function multiBitratePushlistAsyncWithHttpInfo($x_api_key)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20010';
        $request = $this->multiBitratePushlistRequest($x_api_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'multiBitratePushlist'
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function multiBitratePushlistRequest($x_api_key)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling multiBitratePushlist'
            );
        }

        $resourcePath = '/streams/abr';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restartMultiBitratePush
     *
     * Restart
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2005
     */
    public function restartMultiBitratePush($x_api_key, $streamid)
    {
        list($response) = $this->restartMultiBitratePushWithHttpInfo($x_api_key, $streamid);
        return $response;
    }

    /**
     * Operation restartMultiBitratePushWithHttpInfo
     *
     * Restart
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function restartMultiBitratePushWithHttpInfo($x_api_key, $streamid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->restartMultiBitratePushRequest($x_api_key, $streamid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2005',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restartMultiBitratePushAsync
     *
     * Restart
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restartMultiBitratePushAsync($x_api_key, $streamid)
    {
        return $this->restartMultiBitratePushAsyncWithHttpInfo($x_api_key, $streamid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restartMultiBitratePushAsyncWithHttpInfo
     *
     * Restart
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restartMultiBitratePushAsyncWithHttpInfo($x_api_key, $streamid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->restartMultiBitratePushRequest($x_api_key, $streamid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restartMultiBitratePush'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restartMultiBitratePushRequest($x_api_key, $streamid)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling restartMultiBitratePush'
            );
        }
        // verify the required parameter 'streamid' is set
        if ($streamid === null || (is_array($streamid) && count($streamid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $streamid when calling restartMultiBitratePush'
            );
        }

        $resourcePath = '/streams/abr/{streamid}/restart';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($streamid !== null) {
            $resourcePath = str_replace(
                '{' . 'streamid' . '}',
                ObjectSerializer::toPathValue($streamid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restoreMultiBitratePush
     *
     * Restore
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2005
     */
    public function restoreMultiBitratePush($x_api_key, $streamid)
    {
        list($response) = $this->restoreMultiBitratePushWithHttpInfo($x_api_key, $streamid);
        return $response;
    }

    /**
     * Operation restoreMultiBitratePushWithHttpInfo
     *
     * Restore
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function restoreMultiBitratePushWithHttpInfo($x_api_key, $streamid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->restoreMultiBitratePushRequest($x_api_key, $streamid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2005',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restoreMultiBitratePushAsync
     *
     * Restore
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restoreMultiBitratePushAsync($x_api_key, $streamid)
    {
        return $this->restoreMultiBitratePushAsyncWithHttpInfo($x_api_key, $streamid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restoreMultiBitratePushAsyncWithHttpInfo
     *
     * Restore
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restoreMultiBitratePushAsyncWithHttpInfo($x_api_key, $streamid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->restoreMultiBitratePushRequest($x_api_key, $streamid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restoreMultiBitratePush'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restoreMultiBitratePushRequest($x_api_key, $streamid)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling restoreMultiBitratePush'
            );
        }
        // verify the required parameter 'streamid' is set
        if ($streamid === null || (is_array($streamid) && count($streamid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $streamid when calling restoreMultiBitratePush'
            );
        }

        $resourcePath = '/streams/abr/{streamid}/restore';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($streamid !== null) {
            $resourcePath = str_replace(
                '{' . 'streamid' . '}',
                ObjectSerializer::toPathValue($streamid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDomainlockMultiBitratePush
     *
     * Update Domain Lock
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy policy (optional)
     * @param  string $list list (optional)
     * @param  string $ips ips (optional)
     * @param  string $type type (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20012
     */
    public function updateDomainlockMultiBitratePush($x_api_key, $streamid, $policy = null, $list = null, $ips = null, $type = null)
    {
        list($response) = $this->updateDomainlockMultiBitratePushWithHttpInfo($x_api_key, $streamid, $policy, $list, $ips, $type);
        return $response;
    }

    /**
     * Operation updateDomainlockMultiBitratePushWithHttpInfo
     *
     * Update Domain Lock
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  string $ips (optional)
     * @param  string $type (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDomainlockMultiBitratePushWithHttpInfo($x_api_key, $streamid, $policy = null, $list = null, $ips = null, $type = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20012';
        $request = $this->updateDomainlockMultiBitratePushRequest($x_api_key, $streamid, $policy, $list, $ips, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDomainlockMultiBitratePushAsync
     *
     * Update Domain Lock
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  string $ips (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDomainlockMultiBitratePushAsync($x_api_key, $streamid, $policy = null, $list = null, $ips = null, $type = null)
    {
        return $this->updateDomainlockMultiBitratePushAsyncWithHttpInfo($x_api_key, $streamid, $policy, $list, $ips, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDomainlockMultiBitratePushAsyncWithHttpInfo
     *
     * Update Domain Lock
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  string $ips (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDomainlockMultiBitratePushAsyncWithHttpInfo($x_api_key, $streamid, $policy = null, $list = null, $ips = null, $type = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20012';
        $request = $this->updateDomainlockMultiBitratePushRequest($x_api_key, $streamid, $policy, $list, $ips, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDomainlockMultiBitratePush'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  string $ips (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateDomainlockMultiBitratePushRequest($x_api_key, $streamid, $policy = null, $list = null, $ips = null, $type = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updateDomainlockMultiBitratePush'
            );
        }
        // verify the required parameter 'streamid' is set
        if ($streamid === null || (is_array($streamid) && count($streamid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $streamid when calling updateDomainlockMultiBitratePush'
            );
        }

        $resourcePath = '/streams/abr/{streamid}/domainlock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($streamid !== null) {
            $resourcePath = str_replace(
                '{' . 'streamid' . '}',
                ObjectSerializer::toPathValue($streamid),
                $resourcePath
            );
        }

        // form params
        if ($policy !== null) {
            $formParams['policy'] = ObjectSerializer::toFormValue($policy);
        }
        // form params
        if ($list !== null) {
            $formParams['list'] = ObjectSerializer::toFormValue($list);
        }
        // form params
        if ($ips !== null) {
            $formParams['ips'] = ObjectSerializer::toFormValue($ips);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateExternalAuthControlMultiBitratePush
     *
     * Update External Auth Control
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy policy (optional)
     * @param  string $authurl authurl (optional)
     * @param  string $ips ips (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20012
     */
    public function updateExternalAuthControlMultiBitratePush($x_api_key, $streamid, $policy = null, $authurl = null, $ips = null)
    {
        list($response) = $this->updateExternalAuthControlMultiBitratePushWithHttpInfo($x_api_key, $streamid, $policy, $authurl, $ips);
        return $response;
    }

    /**
     * Operation updateExternalAuthControlMultiBitratePushWithHttpInfo
     *
     * Update External Auth Control
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $authurl (optional)
     * @param  string $ips (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateExternalAuthControlMultiBitratePushWithHttpInfo($x_api_key, $streamid, $policy = null, $authurl = null, $ips = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20012';
        $request = $this->updateExternalAuthControlMultiBitratePushRequest($x_api_key, $streamid, $policy, $authurl, $ips);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateExternalAuthControlMultiBitratePushAsync
     *
     * Update External Auth Control
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $authurl (optional)
     * @param  string $ips (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateExternalAuthControlMultiBitratePushAsync($x_api_key, $streamid, $policy = null, $authurl = null, $ips = null)
    {
        return $this->updateExternalAuthControlMultiBitratePushAsyncWithHttpInfo($x_api_key, $streamid, $policy, $authurl, $ips)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateExternalAuthControlMultiBitratePushAsyncWithHttpInfo
     *
     * Update External Auth Control
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $authurl (optional)
     * @param  string $ips (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateExternalAuthControlMultiBitratePushAsyncWithHttpInfo($x_api_key, $streamid, $policy = null, $authurl = null, $ips = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20012';
        $request = $this->updateExternalAuthControlMultiBitratePushRequest($x_api_key, $streamid, $policy, $authurl, $ips);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateExternalAuthControlMultiBitratePush'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $authurl (optional)
     * @param  string $ips (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateExternalAuthControlMultiBitratePushRequest($x_api_key, $streamid, $policy = null, $authurl = null, $ips = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updateExternalAuthControlMultiBitratePush'
            );
        }
        // verify the required parameter 'streamid' is set
        if ($streamid === null || (is_array($streamid) && count($streamid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $streamid when calling updateExternalAuthControlMultiBitratePush'
            );
        }

        $resourcePath = '/streams/abr/{streamid}/eac';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($streamid !== null) {
            $resourcePath = str_replace(
                '{' . 'streamid' . '}',
                ObjectSerializer::toPathValue($streamid),
                $resourcePath
            );
        }

        // form params
        if ($policy !== null) {
            $formParams['policy'] = ObjectSerializer::toFormValue($policy);
        }
        // form params
        if ($authurl !== null) {
            $formParams['authurl'] = ObjectSerializer::toFormValue($authurl);
        }
        // form params
        if ($ips !== null) {
            $formParams['ips'] = ObjectSerializer::toFormValue($ips);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateGeoblockMultiBitratePush
     *
     * Update Geo Block
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy policy (optional)
     * @param  \Swagger\Client\Model\StreamsabrstreamidgeoblockList $list list (optional)
     * @param  string $ips ips (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20012
     */
    public function updateGeoblockMultiBitratePush($x_api_key, $streamid, $policy = null, $list = null, $ips = null)
    {
        list($response) = $this->updateGeoblockMultiBitratePushWithHttpInfo($x_api_key, $streamid, $policy, $list, $ips);
        return $response;
    }

    /**
     * Operation updateGeoblockMultiBitratePushWithHttpInfo
     *
     * Update Geo Block
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  \Swagger\Client\Model\StreamsabrstreamidgeoblockList $list (optional)
     * @param  string $ips (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateGeoblockMultiBitratePushWithHttpInfo($x_api_key, $streamid, $policy = null, $list = null, $ips = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20012';
        $request = $this->updateGeoblockMultiBitratePushRequest($x_api_key, $streamid, $policy, $list, $ips);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateGeoblockMultiBitratePushAsync
     *
     * Update Geo Block
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  \Swagger\Client\Model\StreamsabrstreamidgeoblockList $list (optional)
     * @param  string $ips (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGeoblockMultiBitratePushAsync($x_api_key, $streamid, $policy = null, $list = null, $ips = null)
    {
        return $this->updateGeoblockMultiBitratePushAsyncWithHttpInfo($x_api_key, $streamid, $policy, $list, $ips)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateGeoblockMultiBitratePushAsyncWithHttpInfo
     *
     * Update Geo Block
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  \Swagger\Client\Model\StreamsabrstreamidgeoblockList $list (optional)
     * @param  string $ips (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGeoblockMultiBitratePushAsyncWithHttpInfo($x_api_key, $streamid, $policy = null, $list = null, $ips = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20012';
        $request = $this->updateGeoblockMultiBitratePushRequest($x_api_key, $streamid, $policy, $list, $ips);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateGeoblockMultiBitratePush'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  \Swagger\Client\Model\StreamsabrstreamidgeoblockList $list (optional)
     * @param  string $ips (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateGeoblockMultiBitratePushRequest($x_api_key, $streamid, $policy = null, $list = null, $ips = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updateGeoblockMultiBitratePush'
            );
        }
        // verify the required parameter 'streamid' is set
        if ($streamid === null || (is_array($streamid) && count($streamid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $streamid when calling updateGeoblockMultiBitratePush'
            );
        }

        $resourcePath = '/streams/abr/{streamid}/geoblock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($streamid !== null) {
            $resourcePath = str_replace(
                '{' . 'streamid' . '}',
                ObjectSerializer::toPathValue($streamid),
                $resourcePath
            );
        }

        // form params
        if ($policy !== null) {
            $formParams['policy'] = ObjectSerializer::toFormValue($policy);
        }
        // form params
        if ($list !== null) {
            $formParams['list'] = ObjectSerializer::toFormValue($list);
        }
        // form params
        if ($ips !== null) {
            $formParams['ips'] = ObjectSerializer::toFormValue($ips);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateMultiBitratePush
     *
     * Update Info
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $server server (optional)
     * @param  string $audioonly audioonly (optional)
     * @param  string $ssl ssl (optional)
     * @param  string $profile profile (optional)
     * @param  string $parentid parentid (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20012
     */
    public function updateMultiBitratePush($x_api_key, $streamid, $server = null, $audioonly = null, $ssl = null, $profile = null, $parentid = null)
    {
        list($response) = $this->updateMultiBitratePushWithHttpInfo($x_api_key, $streamid, $server, $audioonly, $ssl, $profile, $parentid);
        return $response;
    }

    /**
     * Operation updateMultiBitratePushWithHttpInfo
     *
     * Update Info
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $server (optional)
     * @param  string $audioonly (optional)
     * @param  string $ssl (optional)
     * @param  string $profile (optional)
     * @param  string $parentid (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateMultiBitratePushWithHttpInfo($x_api_key, $streamid, $server = null, $audioonly = null, $ssl = null, $profile = null, $parentid = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20012';
        $request = $this->updateMultiBitratePushRequest($x_api_key, $streamid, $server, $audioonly, $ssl, $profile, $parentid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateMultiBitratePushAsync
     *
     * Update Info
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $server (optional)
     * @param  string $audioonly (optional)
     * @param  string $ssl (optional)
     * @param  string $profile (optional)
     * @param  string $parentid (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMultiBitratePushAsync($x_api_key, $streamid, $server = null, $audioonly = null, $ssl = null, $profile = null, $parentid = null)
    {
        return $this->updateMultiBitratePushAsyncWithHttpInfo($x_api_key, $streamid, $server, $audioonly, $ssl, $profile, $parentid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateMultiBitratePushAsyncWithHttpInfo
     *
     * Update Info
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $server (optional)
     * @param  string $audioonly (optional)
     * @param  string $ssl (optional)
     * @param  string $profile (optional)
     * @param  string $parentid (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateMultiBitratePushAsyncWithHttpInfo($x_api_key, $streamid, $server = null, $audioonly = null, $ssl = null, $profile = null, $parentid = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20012';
        $request = $this->updateMultiBitratePushRequest($x_api_key, $streamid, $server, $audioonly, $ssl, $profile, $parentid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateMultiBitratePush'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $server (optional)
     * @param  string $audioonly (optional)
     * @param  string $ssl (optional)
     * @param  string $profile (optional)
     * @param  string $parentid (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateMultiBitratePushRequest($x_api_key, $streamid, $server = null, $audioonly = null, $ssl = null, $profile = null, $parentid = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updateMultiBitratePush'
            );
        }
        // verify the required parameter 'streamid' is set
        if ($streamid === null || (is_array($streamid) && count($streamid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $streamid when calling updateMultiBitratePush'
            );
        }

        $resourcePath = '/streams/abr/{streamid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($streamid !== null) {
            $resourcePath = str_replace(
                '{' . 'streamid' . '}',
                ObjectSerializer::toPathValue($streamid),
                $resourcePath
            );
        }

        // form params
        if ($server !== null) {
            $formParams['server'] = ObjectSerializer::toFormValue($server);
        }
        // form params
        if ($audioonly !== null) {
            $formParams['audioonly'] = ObjectSerializer::toFormValue($audioonly);
        }
        // form params
        if ($ssl !== null) {
            $formParams['ssl'] = ObjectSerializer::toFormValue($ssl);
        }
        // form params
        if ($profile !== null) {
            $formParams['profile[]'] = ObjectSerializer::toFormValue($profile);
        }
        // form params
        if ($parentid !== null) {
            $formParams['parentid'] = ObjectSerializer::toFormValue($parentid);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateRtmpauthMultiBitratePush
     *
     * Update RTMP Auth
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy policy (optional)
     * @param  string $username username (optional)
     * @param  string $password password (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20012
     */
    public function updateRtmpauthMultiBitratePush($x_api_key, $streamid, $policy = null, $username = null, $password = null)
    {
        list($response) = $this->updateRtmpauthMultiBitratePushWithHttpInfo($x_api_key, $streamid, $policy, $username, $password);
        return $response;
    }

    /**
     * Operation updateRtmpauthMultiBitratePushWithHttpInfo
     *
     * Update RTMP Auth
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $username (optional)
     * @param  string $password (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateRtmpauthMultiBitratePushWithHttpInfo($x_api_key, $streamid, $policy = null, $username = null, $password = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20012';
        $request = $this->updateRtmpauthMultiBitratePushRequest($x_api_key, $streamid, $policy, $username, $password);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateRtmpauthMultiBitratePushAsync
     *
     * Update RTMP Auth
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $username (optional)
     * @param  string $password (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRtmpauthMultiBitratePushAsync($x_api_key, $streamid, $policy = null, $username = null, $password = null)
    {
        return $this->updateRtmpauthMultiBitratePushAsyncWithHttpInfo($x_api_key, $streamid, $policy, $username, $password)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateRtmpauthMultiBitratePushAsyncWithHttpInfo
     *
     * Update RTMP Auth
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $username (optional)
     * @param  string $password (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRtmpauthMultiBitratePushAsyncWithHttpInfo($x_api_key, $streamid, $policy = null, $username = null, $password = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20012';
        $request = $this->updateRtmpauthMultiBitratePushRequest($x_api_key, $streamid, $policy, $username, $password);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateRtmpauthMultiBitratePush'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $username (optional)
     * @param  string $password (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateRtmpauthMultiBitratePushRequest($x_api_key, $streamid, $policy = null, $username = null, $password = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updateRtmpauthMultiBitratePush'
            );
        }
        // verify the required parameter 'streamid' is set
        if ($streamid === null || (is_array($streamid) && count($streamid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $streamid when calling updateRtmpauthMultiBitratePush'
            );
        }

        $resourcePath = '/streams/abr/{streamid}/rtmpauth';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($streamid !== null) {
            $resourcePath = str_replace(
                '{' . 'streamid' . '}',
                ObjectSerializer::toPathValue($streamid),
                $resourcePath
            );
        }

        // form params
        if ($policy !== null) {
            $formParams['policy'] = ObjectSerializer::toFormValue($policy);
        }
        // form params
        if ($username !== null) {
            $formParams['username'] = ObjectSerializer::toFormValue($username);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSourceMultiBitratePush
     *
     * Update Source
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  \Swagger\Client\Model\StreamsabrstreamidsourceAbr $abr abr (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20012
     */
    public function updateSourceMultiBitratePush($x_api_key, $streamid, $abr = null)
    {
        list($response) = $this->updateSourceMultiBitratePushWithHttpInfo($x_api_key, $streamid, $abr);
        return $response;
    }

    /**
     * Operation updateSourceMultiBitratePushWithHttpInfo
     *
     * Update Source
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  \Swagger\Client\Model\StreamsabrstreamidsourceAbr $abr (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSourceMultiBitratePushWithHttpInfo($x_api_key, $streamid, $abr = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20012';
        $request = $this->updateSourceMultiBitratePushRequest($x_api_key, $streamid, $abr);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSourceMultiBitratePushAsync
     *
     * Update Source
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  \Swagger\Client\Model\StreamsabrstreamidsourceAbr $abr (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSourceMultiBitratePushAsync($x_api_key, $streamid, $abr = null)
    {
        return $this->updateSourceMultiBitratePushAsyncWithHttpInfo($x_api_key, $streamid, $abr)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSourceMultiBitratePushAsyncWithHttpInfo
     *
     * Update Source
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  \Swagger\Client\Model\StreamsabrstreamidsourceAbr $abr (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSourceMultiBitratePushAsyncWithHttpInfo($x_api_key, $streamid, $abr = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20012';
        $request = $this->updateSourceMultiBitratePushRequest($x_api_key, $streamid, $abr);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSourceMultiBitratePush'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  \Swagger\Client\Model\StreamsabrstreamidsourceAbr $abr (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSourceMultiBitratePushRequest($x_api_key, $streamid, $abr = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updateSourceMultiBitratePush'
            );
        }
        // verify the required parameter 'streamid' is set
        if ($streamid === null || (is_array($streamid) && count($streamid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $streamid when calling updateSourceMultiBitratePush'
            );
        }

        $resourcePath = '/streams/abr/{streamid}/source';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($streamid !== null) {
            $resourcePath = str_replace(
                '{' . 'streamid' . '}',
                ObjectSerializer::toPathValue($streamid),
                $resourcePath
            );
        }

        // form params
        if ($abr !== null) {
            $formParams['abr'] = ObjectSerializer::toFormValue($abr);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
