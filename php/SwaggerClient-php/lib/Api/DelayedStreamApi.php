<?php
/**
 * DelayedStreamApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 5centscdn API
 *
 * This is a simple API
 *
 * OpenAPI spec version: 2.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.5
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * DelayedStreamApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DelayedStreamApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createDelayedStream
     *
     * Create Delayed Stream
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $_method _method (optional)
     * @param  string $name name (optional)
     * @param  string $parent parent (optional)
     * @param  int $timeshift timeshift (optional)
     * @param  string $audioonly audioonly (optional)
     * @param  \Swagger\Client\Model\StreamstimeshiftnewDomainlock $domainlock domainlock (optional)
     * @param  \Swagger\Client\Model\StreamstimeshiftnewGeoblock $geoblock geoblock (optional)
     * @param  \Swagger\Client\Model\StreamstimeshiftnewSecuretoken $securetoken securetoken (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewEac $eac eac (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20017
     */
    public function createDelayedStream($x_api_key, $_method = null, $name = null, $parent = null, $timeshift = null, $audioonly = null, $domainlock = null, $geoblock = null, $securetoken = null, $eac = null)
    {
        list($response) = $this->createDelayedStreamWithHttpInfo($x_api_key, $_method, $name, $parent, $timeshift, $audioonly, $domainlock, $geoblock, $securetoken, $eac);
        return $response;
    }

    /**
     * Operation createDelayedStreamWithHttpInfo
     *
     * Create Delayed Stream
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $_method (optional)
     * @param  string $name (optional)
     * @param  string $parent (optional)
     * @param  int $timeshift (optional)
     * @param  string $audioonly (optional)
     * @param  \Swagger\Client\Model\StreamstimeshiftnewDomainlock $domainlock (optional)
     * @param  \Swagger\Client\Model\StreamstimeshiftnewGeoblock $geoblock (optional)
     * @param  \Swagger\Client\Model\StreamstimeshiftnewSecuretoken $securetoken (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewEac $eac (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20017, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDelayedStreamWithHttpInfo($x_api_key, $_method = null, $name = null, $parent = null, $timeshift = null, $audioonly = null, $domainlock = null, $geoblock = null, $securetoken = null, $eac = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20017';
        $request = $this->createDelayedStreamRequest($x_api_key, $_method, $name, $parent, $timeshift, $audioonly, $domainlock, $geoblock, $securetoken, $eac);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20017',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDelayedStreamAsync
     *
     * Create Delayed Stream
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $_method (optional)
     * @param  string $name (optional)
     * @param  string $parent (optional)
     * @param  int $timeshift (optional)
     * @param  string $audioonly (optional)
     * @param  \Swagger\Client\Model\StreamstimeshiftnewDomainlock $domainlock (optional)
     * @param  \Swagger\Client\Model\StreamstimeshiftnewGeoblock $geoblock (optional)
     * @param  \Swagger\Client\Model\StreamstimeshiftnewSecuretoken $securetoken (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewEac $eac (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDelayedStreamAsync($x_api_key, $_method = null, $name = null, $parent = null, $timeshift = null, $audioonly = null, $domainlock = null, $geoblock = null, $securetoken = null, $eac = null)
    {
        return $this->createDelayedStreamAsyncWithHttpInfo($x_api_key, $_method, $name, $parent, $timeshift, $audioonly, $domainlock, $geoblock, $securetoken, $eac)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDelayedStreamAsyncWithHttpInfo
     *
     * Create Delayed Stream
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $_method (optional)
     * @param  string $name (optional)
     * @param  string $parent (optional)
     * @param  int $timeshift (optional)
     * @param  string $audioonly (optional)
     * @param  \Swagger\Client\Model\StreamstimeshiftnewDomainlock $domainlock (optional)
     * @param  \Swagger\Client\Model\StreamstimeshiftnewGeoblock $geoblock (optional)
     * @param  \Swagger\Client\Model\StreamstimeshiftnewSecuretoken $securetoken (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewEac $eac (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDelayedStreamAsyncWithHttpInfo($x_api_key, $_method = null, $name = null, $parent = null, $timeshift = null, $audioonly = null, $domainlock = null, $geoblock = null, $securetoken = null, $eac = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20017';
        $request = $this->createDelayedStreamRequest($x_api_key, $_method, $name, $parent, $timeshift, $audioonly, $domainlock, $geoblock, $securetoken, $eac);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDelayedStream'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $_method (optional)
     * @param  string $name (optional)
     * @param  string $parent (optional)
     * @param  int $timeshift (optional)
     * @param  string $audioonly (optional)
     * @param  \Swagger\Client\Model\StreamstimeshiftnewDomainlock $domainlock (optional)
     * @param  \Swagger\Client\Model\StreamstimeshiftnewGeoblock $geoblock (optional)
     * @param  \Swagger\Client\Model\StreamstimeshiftnewSecuretoken $securetoken (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewEac $eac (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createDelayedStreamRequest($x_api_key, $_method = null, $name = null, $parent = null, $timeshift = null, $audioonly = null, $domainlock = null, $geoblock = null, $securetoken = null, $eac = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling createDelayedStream'
            );
        }

        $resourcePath = '/streams/timeshift/new';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }


        // form params
        if ($_method !== null) {
            $formParams['_METHOD'] = ObjectSerializer::toFormValue($_method);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($parent !== null) {
            $formParams['parent'] = ObjectSerializer::toFormValue($parent);
        }
        // form params
        if ($timeshift !== null) {
            $formParams['timeshift'] = ObjectSerializer::toFormValue($timeshift);
        }
        // form params
        if ($audioonly !== null) {
            $formParams['audioonly'] = ObjectSerializer::toFormValue($audioonly);
        }
        // form params
        if ($domainlock !== null) {
            $formParams['domainlock'] = ObjectSerializer::toFormValue($domainlock);
        }
        // form params
        if ($geoblock !== null) {
            $formParams['geoblock'] = ObjectSerializer::toFormValue($geoblock);
        }
        // form params
        if ($securetoken !== null) {
            $formParams['securetoken'] = ObjectSerializer::toFormValue($securetoken);
        }
        // form params
        if ($eac !== null) {
            $formParams['eac'] = ObjectSerializer::toFormValue($eac);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation delayedstreamsList
     *
     * Delayedstreams
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20016
     */
    public function delayedstreamsList($x_api_key)
    {
        list($response) = $this->delayedstreamsListWithHttpInfo($x_api_key);
        return $response;
    }

    /**
     * Operation delayedstreamsListWithHttpInfo
     *
     * Delayedstreams
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20016, HTTP status code, HTTP response headers (array of strings)
     */
    public function delayedstreamsListWithHttpInfo($x_api_key)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20016';
        $request = $this->delayedstreamsListRequest($x_api_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20016',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation delayedstreamsListAsync
     *
     * Delayedstreams
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function delayedstreamsListAsync($x_api_key)
    {
        return $this->delayedstreamsListAsyncWithHttpInfo($x_api_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation delayedstreamsListAsyncWithHttpInfo
     *
     * Delayedstreams
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function delayedstreamsListAsyncWithHttpInfo($x_api_key)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20016';
        $request = $this->delayedstreamsListRequest($x_api_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'delayedstreamsList'
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function delayedstreamsListRequest($x_api_key)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling delayedstreamsList'
            );
        }

        $resourcePath = '/streams/timeshift';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDetailsDelayedStream
     *
     * Stream
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20017
     */
    public function getDetailsDelayedStream($x_api_key, $streamid)
    {
        list($response) = $this->getDetailsDelayedStreamWithHttpInfo($x_api_key, $streamid);
        return $response;
    }

    /**
     * Operation getDetailsDelayedStreamWithHttpInfo
     *
     * Stream
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20017, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDetailsDelayedStreamWithHttpInfo($x_api_key, $streamid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20017';
        $request = $this->getDetailsDelayedStreamRequest($x_api_key, $streamid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20017',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDetailsDelayedStreamAsync
     *
     * Stream
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDetailsDelayedStreamAsync($x_api_key, $streamid)
    {
        return $this->getDetailsDelayedStreamAsyncWithHttpInfo($x_api_key, $streamid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDetailsDelayedStreamAsyncWithHttpInfo
     *
     * Stream
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDetailsDelayedStreamAsyncWithHttpInfo($x_api_key, $streamid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20017';
        $request = $this->getDetailsDelayedStreamRequest($x_api_key, $streamid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDetailsDelayedStream'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDetailsDelayedStreamRequest($x_api_key, $streamid)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling getDetailsDelayedStream'
            );
        }
        // verify the required parameter 'streamid' is set
        if ($streamid === null || (is_array($streamid) && count($streamid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $streamid when calling getDetailsDelayedStream'
            );
        }

        $resourcePath = '/streams/timeshift/{streamid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($streamid !== null) {
            $resourcePath = str_replace(
                '{' . 'streamid' . '}',
                ObjectSerializer::toPathValue($streamid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getParentsDelayedStream
     *
     * Source Streams
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20019
     */
    public function getParentsDelayedStream($x_api_key, $streamid)
    {
        list($response) = $this->getParentsDelayedStreamWithHttpInfo($x_api_key, $streamid);
        return $response;
    }

    /**
     * Operation getParentsDelayedStreamWithHttpInfo
     *
     * Source Streams
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20019, HTTP status code, HTTP response headers (array of strings)
     */
    public function getParentsDelayedStreamWithHttpInfo($x_api_key, $streamid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20019';
        $request = $this->getParentsDelayedStreamRequest($x_api_key, $streamid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20019',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getParentsDelayedStreamAsync
     *
     * Source Streams
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParentsDelayedStreamAsync($x_api_key, $streamid)
    {
        return $this->getParentsDelayedStreamAsyncWithHttpInfo($x_api_key, $streamid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getParentsDelayedStreamAsyncWithHttpInfo
     *
     * Source Streams
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getParentsDelayedStreamAsyncWithHttpInfo($x_api_key, $streamid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20019';
        $request = $this->getParentsDelayedStreamRequest($x_api_key, $streamid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getParentsDelayedStream'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getParentsDelayedStreamRequest($x_api_key, $streamid)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling getParentsDelayedStream'
            );
        }
        // verify the required parameter 'streamid' is set
        if ($streamid === null || (is_array($streamid) && count($streamid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $streamid when calling getParentsDelayedStream'
            );
        }

        $resourcePath = '/streams/timeshift/parents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($streamid !== null) {
            $resourcePath = str_replace(
                '{' . 'streamid' . '}',
                ObjectSerializer::toPathValue($streamid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restartDelayedStream
     *
     * Restart
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2005
     */
    public function restartDelayedStream($x_api_key, $streamid)
    {
        list($response) = $this->restartDelayedStreamWithHttpInfo($x_api_key, $streamid);
        return $response;
    }

    /**
     * Operation restartDelayedStreamWithHttpInfo
     *
     * Restart
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function restartDelayedStreamWithHttpInfo($x_api_key, $streamid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->restartDelayedStreamRequest($x_api_key, $streamid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2005',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restartDelayedStreamAsync
     *
     * Restart
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restartDelayedStreamAsync($x_api_key, $streamid)
    {
        return $this->restartDelayedStreamAsyncWithHttpInfo($x_api_key, $streamid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restartDelayedStreamAsyncWithHttpInfo
     *
     * Restart
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restartDelayedStreamAsyncWithHttpInfo($x_api_key, $streamid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->restartDelayedStreamRequest($x_api_key, $streamid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restartDelayedStream'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restartDelayedStreamRequest($x_api_key, $streamid)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling restartDelayedStream'
            );
        }
        // verify the required parameter 'streamid' is set
        if ($streamid === null || (is_array($streamid) && count($streamid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $streamid when calling restartDelayedStream'
            );
        }

        $resourcePath = '/streams/timeshift/{streamid}/restart';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($streamid !== null) {
            $resourcePath = str_replace(
                '{' . 'streamid' . '}',
                ObjectSerializer::toPathValue($streamid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restoreDelayedStream
     *
     * Restore
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2005
     */
    public function restoreDelayedStream($x_api_key, $streamid)
    {
        list($response) = $this->restoreDelayedStreamWithHttpInfo($x_api_key, $streamid);
        return $response;
    }

    /**
     * Operation restoreDelayedStreamWithHttpInfo
     *
     * Restore
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function restoreDelayedStreamWithHttpInfo($x_api_key, $streamid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->restoreDelayedStreamRequest($x_api_key, $streamid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2005',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restoreDelayedStreamAsync
     *
     * Restore
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restoreDelayedStreamAsync($x_api_key, $streamid)
    {
        return $this->restoreDelayedStreamAsyncWithHttpInfo($x_api_key, $streamid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restoreDelayedStreamAsyncWithHttpInfo
     *
     * Restore
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restoreDelayedStreamAsyncWithHttpInfo($x_api_key, $streamid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->restoreDelayedStreamRequest($x_api_key, $streamid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restoreDelayedStream'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restoreDelayedStreamRequest($x_api_key, $streamid)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling restoreDelayedStream'
            );
        }
        // verify the required parameter 'streamid' is set
        if ($streamid === null || (is_array($streamid) && count($streamid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $streamid when calling restoreDelayedStream'
            );
        }

        $resourcePath = '/streams/timeshift/{streamid}/restore';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($streamid !== null) {
            $resourcePath = str_replace(
                '{' . 'streamid' . '}',
                ObjectSerializer::toPathValue($streamid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDelayedStream
     *
     * Update Info
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  int $timeshift timeshift (optional)
     * @param  string $audioonly audioonly (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20017
     */
    public function updateDelayedStream($x_api_key, $streamid, $timeshift = null, $audioonly = null)
    {
        list($response) = $this->updateDelayedStreamWithHttpInfo($x_api_key, $streamid, $timeshift, $audioonly);
        return $response;
    }

    /**
     * Operation updateDelayedStreamWithHttpInfo
     *
     * Update Info
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  int $timeshift (optional)
     * @param  string $audioonly (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20017, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDelayedStreamWithHttpInfo($x_api_key, $streamid, $timeshift = null, $audioonly = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20017';
        $request = $this->updateDelayedStreamRequest($x_api_key, $streamid, $timeshift, $audioonly);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20017',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDelayedStreamAsync
     *
     * Update Info
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  int $timeshift (optional)
     * @param  string $audioonly (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDelayedStreamAsync($x_api_key, $streamid, $timeshift = null, $audioonly = null)
    {
        return $this->updateDelayedStreamAsyncWithHttpInfo($x_api_key, $streamid, $timeshift, $audioonly)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDelayedStreamAsyncWithHttpInfo
     *
     * Update Info
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  int $timeshift (optional)
     * @param  string $audioonly (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDelayedStreamAsyncWithHttpInfo($x_api_key, $streamid, $timeshift = null, $audioonly = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20017';
        $request = $this->updateDelayedStreamRequest($x_api_key, $streamid, $timeshift, $audioonly);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDelayedStream'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  int $timeshift (optional)
     * @param  string $audioonly (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateDelayedStreamRequest($x_api_key, $streamid, $timeshift = null, $audioonly = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updateDelayedStream'
            );
        }
        // verify the required parameter 'streamid' is set
        if ($streamid === null || (is_array($streamid) && count($streamid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $streamid when calling updateDelayedStream'
            );
        }

        $resourcePath = '/streams/timeshift/{streamid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($streamid !== null) {
            $resourcePath = str_replace(
                '{' . 'streamid' . '}',
                ObjectSerializer::toPathValue($streamid),
                $resourcePath
            );
        }

        // form params
        if ($timeshift !== null) {
            $formParams['timeshift'] = ObjectSerializer::toFormValue($timeshift);
        }
        // form params
        if ($audioonly !== null) {
            $formParams['audioonly'] = ObjectSerializer::toFormValue($audioonly);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDomainlockDelayedStream
     *
     * Update Domain Lock
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy policy (optional)
     * @param  string $list list (optional)
     * @param  string $ips ips (optional)
     * @param  string $type type (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20017
     */
    public function updateDomainlockDelayedStream($x_api_key, $streamid, $policy = null, $list = null, $ips = null, $type = null)
    {
        list($response) = $this->updateDomainlockDelayedStreamWithHttpInfo($x_api_key, $streamid, $policy, $list, $ips, $type);
        return $response;
    }

    /**
     * Operation updateDomainlockDelayedStreamWithHttpInfo
     *
     * Update Domain Lock
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  string $ips (optional)
     * @param  string $type (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20017, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDomainlockDelayedStreamWithHttpInfo($x_api_key, $streamid, $policy = null, $list = null, $ips = null, $type = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20017';
        $request = $this->updateDomainlockDelayedStreamRequest($x_api_key, $streamid, $policy, $list, $ips, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20017',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDomainlockDelayedStreamAsync
     *
     * Update Domain Lock
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  string $ips (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDomainlockDelayedStreamAsync($x_api_key, $streamid, $policy = null, $list = null, $ips = null, $type = null)
    {
        return $this->updateDomainlockDelayedStreamAsyncWithHttpInfo($x_api_key, $streamid, $policy, $list, $ips, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDomainlockDelayedStreamAsyncWithHttpInfo
     *
     * Update Domain Lock
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  string $ips (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDomainlockDelayedStreamAsyncWithHttpInfo($x_api_key, $streamid, $policy = null, $list = null, $ips = null, $type = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20017';
        $request = $this->updateDomainlockDelayedStreamRequest($x_api_key, $streamid, $policy, $list, $ips, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDomainlockDelayedStream'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  string $ips (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateDomainlockDelayedStreamRequest($x_api_key, $streamid, $policy = null, $list = null, $ips = null, $type = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updateDomainlockDelayedStream'
            );
        }
        // verify the required parameter 'streamid' is set
        if ($streamid === null || (is_array($streamid) && count($streamid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $streamid when calling updateDomainlockDelayedStream'
            );
        }

        $resourcePath = '/streams/timeshift/{streamid}/domainlock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($streamid !== null) {
            $resourcePath = str_replace(
                '{' . 'streamid' . '}',
                ObjectSerializer::toPathValue($streamid),
                $resourcePath
            );
        }

        // form params
        if ($policy !== null) {
            $formParams['policy'] = ObjectSerializer::toFormValue($policy);
        }
        // form params
        if ($list !== null) {
            $formParams['list'] = ObjectSerializer::toFormValue($list);
        }
        // form params
        if ($ips !== null) {
            $formParams['ips'] = ObjectSerializer::toFormValue($ips);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateExternalAuthControlDelayedStream
     *
     * Update External Auth Control
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy policy (optional)
     * @param  string $authurl authurl (optional)
     * @param  string $ips ips (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20018
     */
    public function updateExternalAuthControlDelayedStream($x_api_key, $streamid, $policy = null, $authurl = null, $ips = null)
    {
        list($response) = $this->updateExternalAuthControlDelayedStreamWithHttpInfo($x_api_key, $streamid, $policy, $authurl, $ips);
        return $response;
    }

    /**
     * Operation updateExternalAuthControlDelayedStreamWithHttpInfo
     *
     * Update External Auth Control
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $authurl (optional)
     * @param  string $ips (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20018, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateExternalAuthControlDelayedStreamWithHttpInfo($x_api_key, $streamid, $policy = null, $authurl = null, $ips = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20018';
        $request = $this->updateExternalAuthControlDelayedStreamRequest($x_api_key, $streamid, $policy, $authurl, $ips);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20018',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateExternalAuthControlDelayedStreamAsync
     *
     * Update External Auth Control
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $authurl (optional)
     * @param  string $ips (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateExternalAuthControlDelayedStreamAsync($x_api_key, $streamid, $policy = null, $authurl = null, $ips = null)
    {
        return $this->updateExternalAuthControlDelayedStreamAsyncWithHttpInfo($x_api_key, $streamid, $policy, $authurl, $ips)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateExternalAuthControlDelayedStreamAsyncWithHttpInfo
     *
     * Update External Auth Control
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $authurl (optional)
     * @param  string $ips (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateExternalAuthControlDelayedStreamAsyncWithHttpInfo($x_api_key, $streamid, $policy = null, $authurl = null, $ips = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20018';
        $request = $this->updateExternalAuthControlDelayedStreamRequest($x_api_key, $streamid, $policy, $authurl, $ips);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateExternalAuthControlDelayedStream'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $authurl (optional)
     * @param  string $ips (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateExternalAuthControlDelayedStreamRequest($x_api_key, $streamid, $policy = null, $authurl = null, $ips = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updateExternalAuthControlDelayedStream'
            );
        }
        // verify the required parameter 'streamid' is set
        if ($streamid === null || (is_array($streamid) && count($streamid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $streamid when calling updateExternalAuthControlDelayedStream'
            );
        }

        $resourcePath = '/streams/timeshift/{streamid}/eac';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($streamid !== null) {
            $resourcePath = str_replace(
                '{' . 'streamid' . '}',
                ObjectSerializer::toPathValue($streamid),
                $resourcePath
            );
        }

        // form params
        if ($policy !== null) {
            $formParams['policy'] = ObjectSerializer::toFormValue($policy);
        }
        // form params
        if ($authurl !== null) {
            $formParams['authurl'] = ObjectSerializer::toFormValue($authurl);
        }
        // form params
        if ($ips !== null) {
            $formParams['ips'] = ObjectSerializer::toFormValue($ips);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateGeoblockDelayedStream
     *
     * Update Geo Block
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy policy (optional)
     * @param  \Swagger\Client\Model\StreamsabrstreamidgeoblockList $list list (optional)
     * @param  string $ips ips (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20017
     */
    public function updateGeoblockDelayedStream($x_api_key, $streamid, $policy = null, $list = null, $ips = null)
    {
        list($response) = $this->updateGeoblockDelayedStreamWithHttpInfo($x_api_key, $streamid, $policy, $list, $ips);
        return $response;
    }

    /**
     * Operation updateGeoblockDelayedStreamWithHttpInfo
     *
     * Update Geo Block
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  \Swagger\Client\Model\StreamsabrstreamidgeoblockList $list (optional)
     * @param  string $ips (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20017, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateGeoblockDelayedStreamWithHttpInfo($x_api_key, $streamid, $policy = null, $list = null, $ips = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20017';
        $request = $this->updateGeoblockDelayedStreamRequest($x_api_key, $streamid, $policy, $list, $ips);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20017',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateGeoblockDelayedStreamAsync
     *
     * Update Geo Block
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  \Swagger\Client\Model\StreamsabrstreamidgeoblockList $list (optional)
     * @param  string $ips (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGeoblockDelayedStreamAsync($x_api_key, $streamid, $policy = null, $list = null, $ips = null)
    {
        return $this->updateGeoblockDelayedStreamAsyncWithHttpInfo($x_api_key, $streamid, $policy, $list, $ips)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateGeoblockDelayedStreamAsyncWithHttpInfo
     *
     * Update Geo Block
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  \Swagger\Client\Model\StreamsabrstreamidgeoblockList $list (optional)
     * @param  string $ips (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGeoblockDelayedStreamAsyncWithHttpInfo($x_api_key, $streamid, $policy = null, $list = null, $ips = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20017';
        $request = $this->updateGeoblockDelayedStreamRequest($x_api_key, $streamid, $policy, $list, $ips);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateGeoblockDelayedStream'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  \Swagger\Client\Model\StreamsabrstreamidgeoblockList $list (optional)
     * @param  string $ips (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateGeoblockDelayedStreamRequest($x_api_key, $streamid, $policy = null, $list = null, $ips = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updateGeoblockDelayedStream'
            );
        }
        // verify the required parameter 'streamid' is set
        if ($streamid === null || (is_array($streamid) && count($streamid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $streamid when calling updateGeoblockDelayedStream'
            );
        }

        $resourcePath = '/streams/timeshift/{streamid}/geoblock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($streamid !== null) {
            $resourcePath = str_replace(
                '{' . 'streamid' . '}',
                ObjectSerializer::toPathValue($streamid),
                $resourcePath
            );
        }

        // form params
        if ($policy !== null) {
            $formParams['policy'] = ObjectSerializer::toFormValue($policy);
        }
        // form params
        if ($list !== null) {
            $formParams['list'] = ObjectSerializer::toFormValue($list);
        }
        // form params
        if ($ips !== null) {
            $formParams['ips'] = ObjectSerializer::toFormValue($ips);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSecureDelayedStream
     *
     * Update Secure Token
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy policy (optional)
     * @param  string $list list (optional)
     * @param  string $ips ips (optional)
     * @param  int $timeout timeout (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20017
     */
    public function updateSecureDelayedStream($x_api_key, $streamid, $policy = null, $list = null, $ips = null, $timeout = null)
    {
        list($response) = $this->updateSecureDelayedStreamWithHttpInfo($x_api_key, $streamid, $policy, $list, $ips, $timeout);
        return $response;
    }

    /**
     * Operation updateSecureDelayedStreamWithHttpInfo
     *
     * Update Secure Token
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  string $ips (optional)
     * @param  int $timeout (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20017, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSecureDelayedStreamWithHttpInfo($x_api_key, $streamid, $policy = null, $list = null, $ips = null, $timeout = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20017';
        $request = $this->updateSecureDelayedStreamRequest($x_api_key, $streamid, $policy, $list, $ips, $timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20017',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSecureDelayedStreamAsync
     *
     * Update Secure Token
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  string $ips (optional)
     * @param  int $timeout (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSecureDelayedStreamAsync($x_api_key, $streamid, $policy = null, $list = null, $ips = null, $timeout = null)
    {
        return $this->updateSecureDelayedStreamAsyncWithHttpInfo($x_api_key, $streamid, $policy, $list, $ips, $timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSecureDelayedStreamAsyncWithHttpInfo
     *
     * Update Secure Token
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  string $ips (optional)
     * @param  int $timeout (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSecureDelayedStreamAsyncWithHttpInfo($x_api_key, $streamid, $policy = null, $list = null, $ips = null, $timeout = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20017';
        $request = $this->updateSecureDelayedStreamRequest($x_api_key, $streamid, $policy, $list, $ips, $timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSecureDelayedStream'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  string $ips (optional)
     * @param  int $timeout (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSecureDelayedStreamRequest($x_api_key, $streamid, $policy = null, $list = null, $ips = null, $timeout = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updateSecureDelayedStream'
            );
        }
        // verify the required parameter 'streamid' is set
        if ($streamid === null || (is_array($streamid) && count($streamid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $streamid when calling updateSecureDelayedStream'
            );
        }

        $resourcePath = '/streams/timeshift/{streamid}/securetoken';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($streamid !== null) {
            $resourcePath = str_replace(
                '{' . 'streamid' . '}',
                ObjectSerializer::toPathValue($streamid),
                $resourcePath
            );
        }

        // form params
        if ($policy !== null) {
            $formParams['policy'] = ObjectSerializer::toFormValue($policy);
        }
        // form params
        if ($list !== null) {
            $formParams['list'] = ObjectSerializer::toFormValue($list);
        }
        // form params
        if ($ips !== null) {
            $formParams['ips'] = ObjectSerializer::toFormValue($ips);
        }
        // form params
        if ($timeout !== null) {
            $formParams['timeout'] = ObjectSerializer::toFormValue($timeout);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
