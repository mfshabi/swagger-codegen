<?php
/**
 * StreamspullApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 5centscdn API
 *
 * This is a simple API
 *
 * OpenAPI spec version: 2.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.5
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * StreamspullApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StreamspullApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createStreamsPull
     *
     * Create Restream
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $_method _method (optional)
     * @param  string $name name (optional)
     * @param  string $restreamtype restreamtype (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamnewServer $server server (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamnewUrl $url url (optional)
     * @param  string $audioonly audioonly (optional)
     * @param  \Swagger\Client\Model\StreamstimeshiftnewDomainlock $domainlock domainlock (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamnewGeoblock $geoblock geoblock (optional)
     * @param  string $backup backup (optional)
     * @param  string $audiofix audiofix (optional)
     * @param  \Swagger\Client\Model\StreamstimeshiftnewSecuretoken $securetoken securetoken (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamnewRecord $record record (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewEac $eac eac (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2007
     */
    public function createStreamsPull($x_api_key, $_method = null, $name = null, $restreamtype = null, $server = null, $url = null, $audioonly = null, $domainlock = null, $geoblock = null, $backup = null, $audiofix = null, $securetoken = null, $record = null, $eac = null)
    {
        list($response) = $this->createStreamsPullWithHttpInfo($x_api_key, $_method, $name, $restreamtype, $server, $url, $audioonly, $domainlock, $geoblock, $backup, $audiofix, $securetoken, $record, $eac);
        return $response;
    }

    /**
     * Operation createStreamsPullWithHttpInfo
     *
     * Create Restream
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $_method (optional)
     * @param  string $name (optional)
     * @param  string $restreamtype (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamnewServer $server (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamnewUrl $url (optional)
     * @param  string $audioonly (optional)
     * @param  \Swagger\Client\Model\StreamstimeshiftnewDomainlock $domainlock (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamnewGeoblock $geoblock (optional)
     * @param  string $backup (optional)
     * @param  string $audiofix (optional)
     * @param  \Swagger\Client\Model\StreamstimeshiftnewSecuretoken $securetoken (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamnewRecord $record (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewEac $eac (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2007, HTTP status code, HTTP response headers (array of strings)
     */
    public function createStreamsPullWithHttpInfo($x_api_key, $_method = null, $name = null, $restreamtype = null, $server = null, $url = null, $audioonly = null, $domainlock = null, $geoblock = null, $backup = null, $audiofix = null, $securetoken = null, $record = null, $eac = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2007';
        $request = $this->createStreamsPullRequest($x_api_key, $_method, $name, $restreamtype, $server, $url, $audioonly, $domainlock, $geoblock, $backup, $audiofix, $securetoken, $record, $eac);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2007',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createStreamsPullAsync
     *
     * Create Restream
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $_method (optional)
     * @param  string $name (optional)
     * @param  string $restreamtype (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamnewServer $server (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamnewUrl $url (optional)
     * @param  string $audioonly (optional)
     * @param  \Swagger\Client\Model\StreamstimeshiftnewDomainlock $domainlock (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamnewGeoblock $geoblock (optional)
     * @param  string $backup (optional)
     * @param  string $audiofix (optional)
     * @param  \Swagger\Client\Model\StreamstimeshiftnewSecuretoken $securetoken (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamnewRecord $record (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewEac $eac (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createStreamsPullAsync($x_api_key, $_method = null, $name = null, $restreamtype = null, $server = null, $url = null, $audioonly = null, $domainlock = null, $geoblock = null, $backup = null, $audiofix = null, $securetoken = null, $record = null, $eac = null)
    {
        return $this->createStreamsPullAsyncWithHttpInfo($x_api_key, $_method, $name, $restreamtype, $server, $url, $audioonly, $domainlock, $geoblock, $backup, $audiofix, $securetoken, $record, $eac)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createStreamsPullAsyncWithHttpInfo
     *
     * Create Restream
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $_method (optional)
     * @param  string $name (optional)
     * @param  string $restreamtype (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamnewServer $server (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamnewUrl $url (optional)
     * @param  string $audioonly (optional)
     * @param  \Swagger\Client\Model\StreamstimeshiftnewDomainlock $domainlock (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamnewGeoblock $geoblock (optional)
     * @param  string $backup (optional)
     * @param  string $audiofix (optional)
     * @param  \Swagger\Client\Model\StreamstimeshiftnewSecuretoken $securetoken (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamnewRecord $record (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewEac $eac (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createStreamsPullAsyncWithHttpInfo($x_api_key, $_method = null, $name = null, $restreamtype = null, $server = null, $url = null, $audioonly = null, $domainlock = null, $geoblock = null, $backup = null, $audiofix = null, $securetoken = null, $record = null, $eac = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2007';
        $request = $this->createStreamsPullRequest($x_api_key, $_method, $name, $restreamtype, $server, $url, $audioonly, $domainlock, $geoblock, $backup, $audiofix, $securetoken, $record, $eac);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createStreamsPull'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $_method (optional)
     * @param  string $name (optional)
     * @param  string $restreamtype (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamnewServer $server (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamnewUrl $url (optional)
     * @param  string $audioonly (optional)
     * @param  \Swagger\Client\Model\StreamstimeshiftnewDomainlock $domainlock (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamnewGeoblock $geoblock (optional)
     * @param  string $backup (optional)
     * @param  string $audiofix (optional)
     * @param  \Swagger\Client\Model\StreamstimeshiftnewSecuretoken $securetoken (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamnewRecord $record (optional)
     * @param  \Swagger\Client\Model\StreamsabrnewEac $eac (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createStreamsPullRequest($x_api_key, $_method = null, $name = null, $restreamtype = null, $server = null, $url = null, $audioonly = null, $domainlock = null, $geoblock = null, $backup = null, $audiofix = null, $securetoken = null, $record = null, $eac = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling createStreamsPull'
            );
        }

        $resourcePath = '/streams/restream/new';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }


        // form params
        if ($_method !== null) {
            $formParams['_METHOD'] = ObjectSerializer::toFormValue($_method);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($restreamtype !== null) {
            $formParams['restreamtype'] = ObjectSerializer::toFormValue($restreamtype);
        }
        // form params
        if ($server !== null) {
            $formParams['server'] = ObjectSerializer::toFormValue($server);
        }
        // form params
        if ($url !== null) {
            $formParams['url'] = ObjectSerializer::toFormValue($url);
        }
        // form params
        if ($audioonly !== null) {
            $formParams['audioonly'] = ObjectSerializer::toFormValue($audioonly);
        }
        // form params
        if ($domainlock !== null) {
            $formParams['domainlock'] = ObjectSerializer::toFormValue($domainlock);
        }
        // form params
        if ($geoblock !== null) {
            $formParams['geoblock'] = ObjectSerializer::toFormValue($geoblock);
        }
        // form params
        if ($backup !== null) {
            $formParams['backup'] = ObjectSerializer::toFormValue($backup);
        }
        // form params
        if ($audiofix !== null) {
            $formParams['audiofix'] = ObjectSerializer::toFormValue($audiofix);
        }
        // form params
        if ($securetoken !== null) {
            $formParams['securetoken'] = ObjectSerializer::toFormValue($securetoken);
        }
        // form params
        if ($record !== null) {
            $formParams['record'] = ObjectSerializer::toFormValue($record);
        }
        // form params
        if ($eac !== null) {
            $formParams['eac'] = ObjectSerializer::toFormValue($eac);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDetailsStreamsPull
     *
     * Stream
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2008
     */
    public function getDetailsStreamsPull($x_api_key, $streamid)
    {
        list($response) = $this->getDetailsStreamsPullWithHttpInfo($x_api_key, $streamid);
        return $response;
    }

    /**
     * Operation getDetailsStreamsPullWithHttpInfo
     *
     * Stream
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2008, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDetailsStreamsPullWithHttpInfo($x_api_key, $streamid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2008';
        $request = $this->getDetailsStreamsPullRequest($x_api_key, $streamid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2008',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDetailsStreamsPullAsync
     *
     * Stream
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDetailsStreamsPullAsync($x_api_key, $streamid)
    {
        return $this->getDetailsStreamsPullAsyncWithHttpInfo($x_api_key, $streamid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDetailsStreamsPullAsyncWithHttpInfo
     *
     * Stream
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDetailsStreamsPullAsyncWithHttpInfo($x_api_key, $streamid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2008';
        $request = $this->getDetailsStreamsPullRequest($x_api_key, $streamid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDetailsStreamsPull'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDetailsStreamsPullRequest($x_api_key, $streamid)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling getDetailsStreamsPull'
            );
        }
        // verify the required parameter 'streamid' is set
        if ($streamid === null || (is_array($streamid) && count($streamid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $streamid when calling getDetailsStreamsPull'
            );
        }

        $resourcePath = '/streams/restream/{streamid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($streamid !== null) {
            $resourcePath = str_replace(
                '{' . 'streamid' . '}',
                ObjectSerializer::toPathValue($streamid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPullStreams
     *
     * Stream
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2006
     */
    public function listPullStreams($x_api_key)
    {
        list($response) = $this->listPullStreamsWithHttpInfo($x_api_key);
        return $response;
    }

    /**
     * Operation listPullStreamsWithHttpInfo
     *
     * Stream
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPullStreamsWithHttpInfo($x_api_key)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2006';
        $request = $this->listPullStreamsRequest($x_api_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2006',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPullStreamsAsync
     *
     * Stream
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPullStreamsAsync($x_api_key)
    {
        return $this->listPullStreamsAsyncWithHttpInfo($x_api_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPullStreamsAsyncWithHttpInfo
     *
     * Stream
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPullStreamsAsyncWithHttpInfo($x_api_key)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2006';
        $request = $this->listPullStreamsRequest($x_api_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPullStreams'
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listPullStreamsRequest($x_api_key)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling listPullStreams'
            );
        }

        $resourcePath = '/streams/restream';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restartStreamsPull
     *
     * Restart
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2005
     */
    public function restartStreamsPull($x_api_key, $streamid)
    {
        list($response) = $this->restartStreamsPullWithHttpInfo($x_api_key, $streamid);
        return $response;
    }

    /**
     * Operation restartStreamsPullWithHttpInfo
     *
     * Restart
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function restartStreamsPullWithHttpInfo($x_api_key, $streamid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->restartStreamsPullRequest($x_api_key, $streamid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2005',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restartStreamsPullAsync
     *
     * Restart
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restartStreamsPullAsync($x_api_key, $streamid)
    {
        return $this->restartStreamsPullAsyncWithHttpInfo($x_api_key, $streamid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restartStreamsPullAsyncWithHttpInfo
     *
     * Restart
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restartStreamsPullAsyncWithHttpInfo($x_api_key, $streamid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->restartStreamsPullRequest($x_api_key, $streamid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restartStreamsPull'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restartStreamsPullRequest($x_api_key, $streamid)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling restartStreamsPull'
            );
        }
        // verify the required parameter 'streamid' is set
        if ($streamid === null || (is_array($streamid) && count($streamid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $streamid when calling restartStreamsPull'
            );
        }

        $resourcePath = '/streams/restream/{streamid}/restart';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($streamid !== null) {
            $resourcePath = str_replace(
                '{' . 'streamid' . '}',
                ObjectSerializer::toPathValue($streamid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restoreStreamsPull
     *
     * Restore
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2005
     */
    public function restoreStreamsPull($x_api_key, $streamid)
    {
        list($response) = $this->restoreStreamsPullWithHttpInfo($x_api_key, $streamid);
        return $response;
    }

    /**
     * Operation restoreStreamsPullWithHttpInfo
     *
     * Restore
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function restoreStreamsPullWithHttpInfo($x_api_key, $streamid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->restoreStreamsPullRequest($x_api_key, $streamid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2005',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restoreStreamsPullAsync
     *
     * Restore
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restoreStreamsPullAsync($x_api_key, $streamid)
    {
        return $this->restoreStreamsPullAsyncWithHttpInfo($x_api_key, $streamid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restoreStreamsPullAsyncWithHttpInfo
     *
     * Restore
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restoreStreamsPullAsyncWithHttpInfo($x_api_key, $streamid)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2005';
        $request = $this->restoreStreamsPullRequest($x_api_key, $streamid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restoreStreamsPull'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function restoreStreamsPullRequest($x_api_key, $streamid)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling restoreStreamsPull'
            );
        }
        // verify the required parameter 'streamid' is set
        if ($streamid === null || (is_array($streamid) && count($streamid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $streamid when calling restoreStreamsPull'
            );
        }

        $resourcePath = '/streams/restream/{streamid}/restore';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($streamid !== null) {
            $resourcePath = str_replace(
                '{' . 'streamid' . '}',
                ObjectSerializer::toPathValue($streamid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serversStreamsPull
     *
     * Servers
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2009
     */
    public function serversStreamsPull($x_api_key)
    {
        list($response) = $this->serversStreamsPullWithHttpInfo($x_api_key);
        return $response;
    }

    /**
     * Operation serversStreamsPullWithHttpInfo
     *
     * Servers
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2009, HTTP status code, HTTP response headers (array of strings)
     */
    public function serversStreamsPullWithHttpInfo($x_api_key)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2009';
        $request = $this->serversStreamsPullRequest($x_api_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2009',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serversStreamsPullAsync
     *
     * Servers
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serversStreamsPullAsync($x_api_key)
    {
        return $this->serversStreamsPullAsyncWithHttpInfo($x_api_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serversStreamsPullAsyncWithHttpInfo
     *
     * Servers
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serversStreamsPullAsyncWithHttpInfo($x_api_key)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2009';
        $request = $this->serversStreamsPullRequest($x_api_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serversStreamsPull'
     *
     * @param  string $x_api_key Your API Key (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serversStreamsPullRequest($x_api_key)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling serversStreamsPull'
            );
        }

        $resourcePath = '/streams/restream/servers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDomainlockStreamsPull
     *
     * Update Domain Lock
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy policy (optional)
     * @param  string $list list (optional)
     * @param  string $ips ips (optional)
     * @param  string $type type (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2007
     */
    public function updateDomainlockStreamsPull($x_api_key, $streamid, $policy = null, $list = null, $ips = null, $type = null)
    {
        list($response) = $this->updateDomainlockStreamsPullWithHttpInfo($x_api_key, $streamid, $policy, $list, $ips, $type);
        return $response;
    }

    /**
     * Operation updateDomainlockStreamsPullWithHttpInfo
     *
     * Update Domain Lock
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  string $ips (optional)
     * @param  string $type (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2007, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDomainlockStreamsPullWithHttpInfo($x_api_key, $streamid, $policy = null, $list = null, $ips = null, $type = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2007';
        $request = $this->updateDomainlockStreamsPullRequest($x_api_key, $streamid, $policy, $list, $ips, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2007',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDomainlockStreamsPullAsync
     *
     * Update Domain Lock
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  string $ips (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDomainlockStreamsPullAsync($x_api_key, $streamid, $policy = null, $list = null, $ips = null, $type = null)
    {
        return $this->updateDomainlockStreamsPullAsyncWithHttpInfo($x_api_key, $streamid, $policy, $list, $ips, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDomainlockStreamsPullAsyncWithHttpInfo
     *
     * Update Domain Lock
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  string $ips (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDomainlockStreamsPullAsyncWithHttpInfo($x_api_key, $streamid, $policy = null, $list = null, $ips = null, $type = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2007';
        $request = $this->updateDomainlockStreamsPullRequest($x_api_key, $streamid, $policy, $list, $ips, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDomainlockStreamsPull'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  string $ips (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateDomainlockStreamsPullRequest($x_api_key, $streamid, $policy = null, $list = null, $ips = null, $type = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updateDomainlockStreamsPull'
            );
        }
        // verify the required parameter 'streamid' is set
        if ($streamid === null || (is_array($streamid) && count($streamid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $streamid when calling updateDomainlockStreamsPull'
            );
        }

        $resourcePath = '/streams/restream/{streamid}/domainlock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($streamid !== null) {
            $resourcePath = str_replace(
                '{' . 'streamid' . '}',
                ObjectSerializer::toPathValue($streamid),
                $resourcePath
            );
        }

        // form params
        if ($policy !== null) {
            $formParams['policy'] = ObjectSerializer::toFormValue($policy);
        }
        // form params
        if ($list !== null) {
            $formParams['list'] = ObjectSerializer::toFormValue($list);
        }
        // form params
        if ($ips !== null) {
            $formParams['ips'] = ObjectSerializer::toFormValue($ips);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDvrStreamsPull
     *
     * Update DVR
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $enabled enabled (optional)
     * @param  string $retention retention (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2007
     */
    public function updateDvrStreamsPull($x_api_key, $streamid, $enabled = null, $retention = null)
    {
        list($response) = $this->updateDvrStreamsPullWithHttpInfo($x_api_key, $streamid, $enabled, $retention);
        return $response;
    }

    /**
     * Operation updateDvrStreamsPullWithHttpInfo
     *
     * Update DVR
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $enabled (optional)
     * @param  string $retention (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2007, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDvrStreamsPullWithHttpInfo($x_api_key, $streamid, $enabled = null, $retention = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2007';
        $request = $this->updateDvrStreamsPullRequest($x_api_key, $streamid, $enabled, $retention);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2007',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDvrStreamsPullAsync
     *
     * Update DVR
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $enabled (optional)
     * @param  string $retention (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDvrStreamsPullAsync($x_api_key, $streamid, $enabled = null, $retention = null)
    {
        return $this->updateDvrStreamsPullAsyncWithHttpInfo($x_api_key, $streamid, $enabled, $retention)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDvrStreamsPullAsyncWithHttpInfo
     *
     * Update DVR
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $enabled (optional)
     * @param  string $retention (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDvrStreamsPullAsyncWithHttpInfo($x_api_key, $streamid, $enabled = null, $retention = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2007';
        $request = $this->updateDvrStreamsPullRequest($x_api_key, $streamid, $enabled, $retention);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDvrStreamsPull'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $enabled (optional)
     * @param  string $retention (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateDvrStreamsPullRequest($x_api_key, $streamid, $enabled = null, $retention = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updateDvrStreamsPull'
            );
        }
        // verify the required parameter 'streamid' is set
        if ($streamid === null || (is_array($streamid) && count($streamid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $streamid when calling updateDvrStreamsPull'
            );
        }

        $resourcePath = '/streams/restream/{streamid}/record';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($streamid !== null) {
            $resourcePath = str_replace(
                '{' . 'streamid' . '}',
                ObjectSerializer::toPathValue($streamid),
                $resourcePath
            );
        }

        // form params
        if ($enabled !== null) {
            $formParams['enabled'] = ObjectSerializer::toFormValue($enabled);
        }
        // form params
        if ($retention !== null) {
            $formParams['retention'] = ObjectSerializer::toFormValue($retention);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateExternalAuthControlStreamsPull
     *
     * Update External Auth Control
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy policy (optional)
     * @param  string $authurl authurl (optional)
     * @param  string $ips ips (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2007
     */
    public function updateExternalAuthControlStreamsPull($x_api_key, $streamid, $policy = null, $authurl = null, $ips = null)
    {
        list($response) = $this->updateExternalAuthControlStreamsPullWithHttpInfo($x_api_key, $streamid, $policy, $authurl, $ips);
        return $response;
    }

    /**
     * Operation updateExternalAuthControlStreamsPullWithHttpInfo
     *
     * Update External Auth Control
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $authurl (optional)
     * @param  string $ips (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2007, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateExternalAuthControlStreamsPullWithHttpInfo($x_api_key, $streamid, $policy = null, $authurl = null, $ips = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2007';
        $request = $this->updateExternalAuthControlStreamsPullRequest($x_api_key, $streamid, $policy, $authurl, $ips);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2007',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateExternalAuthControlStreamsPullAsync
     *
     * Update External Auth Control
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $authurl (optional)
     * @param  string $ips (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateExternalAuthControlStreamsPullAsync($x_api_key, $streamid, $policy = null, $authurl = null, $ips = null)
    {
        return $this->updateExternalAuthControlStreamsPullAsyncWithHttpInfo($x_api_key, $streamid, $policy, $authurl, $ips)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateExternalAuthControlStreamsPullAsyncWithHttpInfo
     *
     * Update External Auth Control
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $authurl (optional)
     * @param  string $ips (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateExternalAuthControlStreamsPullAsyncWithHttpInfo($x_api_key, $streamid, $policy = null, $authurl = null, $ips = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2007';
        $request = $this->updateExternalAuthControlStreamsPullRequest($x_api_key, $streamid, $policy, $authurl, $ips);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateExternalAuthControlStreamsPull'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $authurl (optional)
     * @param  string $ips (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateExternalAuthControlStreamsPullRequest($x_api_key, $streamid, $policy = null, $authurl = null, $ips = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updateExternalAuthControlStreamsPull'
            );
        }
        // verify the required parameter 'streamid' is set
        if ($streamid === null || (is_array($streamid) && count($streamid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $streamid when calling updateExternalAuthControlStreamsPull'
            );
        }

        $resourcePath = '/streams/restream/{streamid}/eac';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($streamid !== null) {
            $resourcePath = str_replace(
                '{' . 'streamid' . '}',
                ObjectSerializer::toPathValue($streamid),
                $resourcePath
            );
        }

        // form params
        if ($policy !== null) {
            $formParams['policy'] = ObjectSerializer::toFormValue($policy);
        }
        // form params
        if ($authurl !== null) {
            $formParams['authurl'] = ObjectSerializer::toFormValue($authurl);
        }
        // form params
        if ($ips !== null) {
            $formParams['ips'] = ObjectSerializer::toFormValue($ips);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateGeoblockStreamsPull
     *
     * Update Geo Block
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy policy (optional)
     * @param  \Swagger\Client\Model\StreamsabrstreamidgeoblockList $list list (optional)
     * @param  string $ips ips (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2007
     */
    public function updateGeoblockStreamsPull($x_api_key, $streamid, $policy = null, $list = null, $ips = null)
    {
        list($response) = $this->updateGeoblockStreamsPullWithHttpInfo($x_api_key, $streamid, $policy, $list, $ips);
        return $response;
    }

    /**
     * Operation updateGeoblockStreamsPullWithHttpInfo
     *
     * Update Geo Block
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  \Swagger\Client\Model\StreamsabrstreamidgeoblockList $list (optional)
     * @param  string $ips (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2007, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateGeoblockStreamsPullWithHttpInfo($x_api_key, $streamid, $policy = null, $list = null, $ips = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2007';
        $request = $this->updateGeoblockStreamsPullRequest($x_api_key, $streamid, $policy, $list, $ips);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2007',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateGeoblockStreamsPullAsync
     *
     * Update Geo Block
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  \Swagger\Client\Model\StreamsabrstreamidgeoblockList $list (optional)
     * @param  string $ips (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGeoblockStreamsPullAsync($x_api_key, $streamid, $policy = null, $list = null, $ips = null)
    {
        return $this->updateGeoblockStreamsPullAsyncWithHttpInfo($x_api_key, $streamid, $policy, $list, $ips)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateGeoblockStreamsPullAsyncWithHttpInfo
     *
     * Update Geo Block
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  \Swagger\Client\Model\StreamsabrstreamidgeoblockList $list (optional)
     * @param  string $ips (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGeoblockStreamsPullAsyncWithHttpInfo($x_api_key, $streamid, $policy = null, $list = null, $ips = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2007';
        $request = $this->updateGeoblockStreamsPullRequest($x_api_key, $streamid, $policy, $list, $ips);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateGeoblockStreamsPull'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  \Swagger\Client\Model\StreamsabrstreamidgeoblockList $list (optional)
     * @param  string $ips (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateGeoblockStreamsPullRequest($x_api_key, $streamid, $policy = null, $list = null, $ips = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updateGeoblockStreamsPull'
            );
        }
        // verify the required parameter 'streamid' is set
        if ($streamid === null || (is_array($streamid) && count($streamid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $streamid when calling updateGeoblockStreamsPull'
            );
        }

        $resourcePath = '/streams/restream/{streamid}/geoblock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($streamid !== null) {
            $resourcePath = str_replace(
                '{' . 'streamid' . '}',
                ObjectSerializer::toPathValue($streamid),
                $resourcePath
            );
        }

        // form params
        if ($policy !== null) {
            $formParams['policy'] = ObjectSerializer::toFormValue($policy);
        }
        // form params
        if ($list !== null) {
            $formParams['list'] = ObjectSerializer::toFormValue($list);
        }
        // form params
        if ($ips !== null) {
            $formParams['ips'] = ObjectSerializer::toFormValue($ips);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSecuretokenStreamsPull
     *
     * Update SecureToken
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy policy (optional)
     * @param  string $list list (optional)
     * @param  string $ips ips (optional)
     * @param  string $timeout timeout (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2007
     */
    public function updateSecuretokenStreamsPull($x_api_key, $streamid, $policy = null, $list = null, $ips = null, $timeout = null)
    {
        list($response) = $this->updateSecuretokenStreamsPullWithHttpInfo($x_api_key, $streamid, $policy, $list, $ips, $timeout);
        return $response;
    }

    /**
     * Operation updateSecuretokenStreamsPullWithHttpInfo
     *
     * Update SecureToken
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  string $ips (optional)
     * @param  string $timeout (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2007, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSecuretokenStreamsPullWithHttpInfo($x_api_key, $streamid, $policy = null, $list = null, $ips = null, $timeout = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2007';
        $request = $this->updateSecuretokenStreamsPullRequest($x_api_key, $streamid, $policy, $list, $ips, $timeout);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2007',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSecuretokenStreamsPullAsync
     *
     * Update SecureToken
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  string $ips (optional)
     * @param  string $timeout (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSecuretokenStreamsPullAsync($x_api_key, $streamid, $policy = null, $list = null, $ips = null, $timeout = null)
    {
        return $this->updateSecuretokenStreamsPullAsyncWithHttpInfo($x_api_key, $streamid, $policy, $list, $ips, $timeout)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSecuretokenStreamsPullAsyncWithHttpInfo
     *
     * Update SecureToken
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  string $ips (optional)
     * @param  string $timeout (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSecuretokenStreamsPullAsyncWithHttpInfo($x_api_key, $streamid, $policy = null, $list = null, $ips = null, $timeout = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2007';
        $request = $this->updateSecuretokenStreamsPullRequest($x_api_key, $streamid, $policy, $list, $ips, $timeout);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSecuretokenStreamsPull'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $policy (optional)
     * @param  string $list (optional)
     * @param  string $ips (optional)
     * @param  string $timeout (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSecuretokenStreamsPullRequest($x_api_key, $streamid, $policy = null, $list = null, $ips = null, $timeout = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updateSecuretokenStreamsPull'
            );
        }
        // verify the required parameter 'streamid' is set
        if ($streamid === null || (is_array($streamid) && count($streamid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $streamid when calling updateSecuretokenStreamsPull'
            );
        }

        $resourcePath = '/streams/restream/{streamid}/securetoken';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($streamid !== null) {
            $resourcePath = str_replace(
                '{' . 'streamid' . '}',
                ObjectSerializer::toPathValue($streamid),
                $resourcePath
            );
        }

        // form params
        if ($policy !== null) {
            $formParams['policy'] = ObjectSerializer::toFormValue($policy);
        }
        // form params
        if ($list !== null) {
            $formParams['list'] = ObjectSerializer::toFormValue($list);
        }
        // form params
        if ($ips !== null) {
            $formParams['ips'] = ObjectSerializer::toFormValue($ips);
        }
        // form params
        if ($timeout !== null) {
            $formParams['timeout'] = ObjectSerializer::toFormValue($timeout);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSourceStreamsPull
     *
     * Update Source
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $restreamtype restreamtype (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamnewServer $server server (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamstreamidsourceUrl $url url (optional)
     * @param  string $audiofix audiofix (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2008
     */
    public function updateSourceStreamsPull($x_api_key, $streamid, $restreamtype = null, $server = null, $url = null, $audiofix = null)
    {
        list($response) = $this->updateSourceStreamsPullWithHttpInfo($x_api_key, $streamid, $restreamtype, $server, $url, $audiofix);
        return $response;
    }

    /**
     * Operation updateSourceStreamsPullWithHttpInfo
     *
     * Update Source
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $restreamtype (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamnewServer $server (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamstreamidsourceUrl $url (optional)
     * @param  string $audiofix (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2008, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSourceStreamsPullWithHttpInfo($x_api_key, $streamid, $restreamtype = null, $server = null, $url = null, $audiofix = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2008';
        $request = $this->updateSourceStreamsPullRequest($x_api_key, $streamid, $restreamtype, $server, $url, $audiofix);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2008',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSourceStreamsPullAsync
     *
     * Update Source
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $restreamtype (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamnewServer $server (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamstreamidsourceUrl $url (optional)
     * @param  string $audiofix (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSourceStreamsPullAsync($x_api_key, $streamid, $restreamtype = null, $server = null, $url = null, $audiofix = null)
    {
        return $this->updateSourceStreamsPullAsyncWithHttpInfo($x_api_key, $streamid, $restreamtype, $server, $url, $audiofix)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSourceStreamsPullAsyncWithHttpInfo
     *
     * Update Source
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $restreamtype (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamnewServer $server (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamstreamidsourceUrl $url (optional)
     * @param  string $audiofix (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSourceStreamsPullAsyncWithHttpInfo($x_api_key, $streamid, $restreamtype = null, $server = null, $url = null, $audiofix = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2008';
        $request = $this->updateSourceStreamsPullRequest($x_api_key, $streamid, $restreamtype, $server, $url, $audiofix);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSourceStreamsPull'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $restreamtype (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamnewServer $server (optional)
     * @param  \Swagger\Client\Model\StreamsrestreamstreamidsourceUrl $url (optional)
     * @param  string $audiofix (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSourceStreamsPullRequest($x_api_key, $streamid, $restreamtype = null, $server = null, $url = null, $audiofix = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updateSourceStreamsPull'
            );
        }
        // verify the required parameter 'streamid' is set
        if ($streamid === null || (is_array($streamid) && count($streamid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $streamid when calling updateSourceStreamsPull'
            );
        }

        $resourcePath = '/streams/restream/{streamid}/source';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($streamid !== null) {
            $resourcePath = str_replace(
                '{' . 'streamid' . '}',
                ObjectSerializer::toPathValue($streamid),
                $resourcePath
            );
        }

        // form params
        if ($restreamtype !== null) {
            $formParams['restreamtype'] = ObjectSerializer::toFormValue($restreamtype);
        }
        // form params
        if ($server !== null) {
            $formParams['server'] = ObjectSerializer::toFormValue($server);
        }
        // form params
        if ($url !== null) {
            $formParams['url'] = ObjectSerializer::toFormValue($url);
        }
        // form params
        if ($audiofix !== null) {
            $formParams['audiofix'] = ObjectSerializer::toFormValue($audiofix);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatesStreamsPull
     *
     * Update Info
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $audioonly audioonly (optional)
     * @param  string $backup backup (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2007
     */
    public function updatesStreamsPull($x_api_key, $streamid, $audioonly = null, $backup = null)
    {
        list($response) = $this->updatesStreamsPullWithHttpInfo($x_api_key, $streamid, $audioonly, $backup);
        return $response;
    }

    /**
     * Operation updatesStreamsPullWithHttpInfo
     *
     * Update Info
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $audioonly (optional)
     * @param  string $backup (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2007, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatesStreamsPullWithHttpInfo($x_api_key, $streamid, $audioonly = null, $backup = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2007';
        $request = $this->updatesStreamsPullRequest($x_api_key, $streamid, $audioonly, $backup);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2007',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatesStreamsPullAsync
     *
     * Update Info
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $audioonly (optional)
     * @param  string $backup (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatesStreamsPullAsync($x_api_key, $streamid, $audioonly = null, $backup = null)
    {
        return $this->updatesStreamsPullAsyncWithHttpInfo($x_api_key, $streamid, $audioonly, $backup)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatesStreamsPullAsyncWithHttpInfo
     *
     * Update Info
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $audioonly (optional)
     * @param  string $backup (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatesStreamsPullAsyncWithHttpInfo($x_api_key, $streamid, $audioonly = null, $backup = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2007';
        $request = $this->updatesStreamsPullRequest($x_api_key, $streamid, $audioonly, $backup);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatesStreamsPull'
     *
     * @param  string $x_api_key Your API Key (required)
     * @param  string $streamid Stream ID (required)
     * @param  string $audioonly (optional)
     * @param  string $backup (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updatesStreamsPullRequest($x_api_key, $streamid, $audioonly = null, $backup = null)
    {
        // verify the required parameter 'x_api_key' is set
        if ($x_api_key === null || (is_array($x_api_key) && count($x_api_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_api_key when calling updatesStreamsPull'
            );
        }
        // verify the required parameter 'streamid' is set
        if ($streamid === null || (is_array($streamid) && count($streamid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $streamid when calling updatesStreamsPull'
            );
        }

        $resourcePath = '/streams/restream/{streamid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_api_key !== null) {
            $headerParams['X-API-Key'] = ObjectSerializer::toHeaderValue($x_api_key);
        }

        // path params
        if ($streamid !== null) {
            $resourcePath = str_replace(
                '{' . 'streamid' . '}',
                ObjectSerializer::toPathValue($streamid),
                $resourcePath
            );
        }

        // form params
        if ($audioonly !== null) {
            $formParams['audioonly'] = ObjectSerializer::toFormValue($audioonly);
        }
        // form params
        if ($backup !== null) {
            $formParams['backup'] = ObjectSerializer::toFormValue($backup);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
